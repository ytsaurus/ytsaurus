package NYT.NQueryClient.NProto;
import "yt/library/query/proto/query.proto";
import "yt/library/query/proto/functions_cache.proto";
import "yt_proto/yt/client/misc/proto/workload.proto";
import "yt_proto/yt/client/node_tracker_client/proto/node_directory.proto";
import "yt_proto/yt/client/table_client/proto/versioned_io_options.proto";
import "yt_proto/yt/client/table_chunk_format/proto/wire_protocol.proto";
import "yt_proto/yt/client/table_chunk_format/proto/chunk_meta.proto";
import "yt_proto/yt/client/query_client/proto/query_statistics.proto";
import "yt_proto/yt/client/chaos_client/proto/replication_card.proto";
import "yt_proto/yt/client/chunk_client/proto/read_limit.proto";
import "yt_proto/yt/client/chunk_client/proto/chunk_spec.proto";
import "yt_proto/yt/core/rpc/proto/rpc.proto";
import "yt_proto/yt/core/misc/proto/guid.proto";
import "yt_proto/yt/core/misc/proto/error.proto";

////////////////////////////////////////////////////////////////////////////////

message TReqExecuteExt
{
    extend NRpc.NProto.TRequestHeader
    {
        optional TReqExecuteExt req_execute_ext = 200;
    }

    optional string execution_pool = 1 [default = "default"];
    optional string execution_tag = 2 [default = "default"];
}

message TReqExecute
{
    required TQuery query = 1;
    repeated TExternalFunctionImpl external_functions = 5;
    required NYT.NNodeTrackerClient.NProto.TNodeDirectory node_directory = 6;
    required TQueryOptions options = 2;
    repeated TDataSource data_sources = 3;
    // TODO(kiselyovp) move codec to header
    required int32 response_codec = 4; // ECodec

    reserved 7;

    optional TFeatureFlags feature_flags = 8;
}

message TRspExecute
{
    required TQueryStatistics query_statistics = 1;
    // Attachments contain wire-encoded data.

    optional TFeatureFlags feature_flags = 2;
}

////////////////////////////////////////////////////////////////////////////////

message TReqMultireadExt
{
    extend NRpc.NProto.TRequestHeader
    {
        optional TReqMultireadExt req_multiread_ext = 201;
    }

    optional int32 in_memory_mode = 1 [default = 0]; // EInMemoryMode, EInMemoryMode::None by default
}

message TReqMultiread
{
    // TODO(kiselyovp) move codecs to header
    required int32 request_codec = 1; // ECodec
    required int32 response_codec = 2; // ECodec
    optional bytes retention_config = 3;
    required uint64 timestamp = 4;
    optional uint64 retention_timestamp = 10;
    repeated NYT.NProto.TGuid tablet_ids = 5;
    repeated NYT.NProto.TGuid cell_ids = 9;
    repeated int64 mount_revisions = 6;
    optional bool enable_partial_result = 7 [default=false];
    optional bool use_lookup_cache = 8 [default=false];
    optional NYT.NTableClient.NProto.TVersionedReadOptions versioned_read_options = 11;

    // Attachment contains wire-encoded data.
}

message TRspMultiread
{
    // Attachment contains wire-encoded data.
}

////////////////////////////////////////////////////////////////////////////////

message TReqReadDynamicStore
{
    required NYT.NProto.TGuid store_id = 2;
    required NYT.NProto.TGuid tablet_id = 1;
    required NYT.NProto.TGuid cell_id = 12;
    optional uint64 timestamp = 3;
    optional bytes lower_bound  = 4;
    optional bytes upper_bound = 5;
    required NYT.NProto.TGuid read_session_id = 6;
    optional NYT.NTableClient.NProto.TColumnFilter column_filter = 7;
    optional int64 start_row_index = 8;
    optional int64 end_row_index = 9;
    optional int64 max_rows_per_read = 10;

    // Fail each attachment request with certain probability.
    // Used for testing only.
    optional float failure_probability = 11;
}

message TRspReadDynamicStore
{
    // Data is transferred via RPC streaming.
}

////////////////////////////////////////////////////////////////////////////////

message TReqPullRows
{
    required NYT.NProto.TGuid upstream_replica_id = 1; // NChaosClient::TReplicaId

    required int32 request_codec = 2; // ECodec
    required int32 response_codec = 3; // ECodec
    required uint64 mount_revision = 4;
    required int64 max_rows_per_read = 5;

    required NYT.NProto.TGuid tablet_id = 6;
    required NYT.NProto.TGuid cell_id = 7;
    required NChaosClient.NProto.TReplicationProgress start_replication_progress = 8;
    required uint64 upper_timestamp = 9;
    optional int64 start_replication_row_index = 10;
    optional int64 max_data_weight = 11;
    optional uint64 request_timeout = 12;
}

message TRspPullRows
{
    required int64 row_count = 1;
    required int64 data_weight = 2;
    optional int64 end_replication_row_index = 3;
    required NChaosClient.NProto.TReplicationProgress end_replication_progress = 4;

    // Attachment contains wire-encoded data.
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetTabletInfo
{
    repeated NYT.NProto.TGuid tablet_ids = 1;
    repeated NYT.NProto.TGuid cell_ids = 2;
    optional bool request_errors = 3;
}

message TReplicaInfo
{
    required NYT.NProto.TGuid replica_id = 1;
    required uint64 last_replication_timestamp = 2;
    required int32 mode = 3; // ETableReplicaMode
    required int64 current_replication_row_index = 4;
    required int64 committed_replication_row_index = 7;
    optional NYT.NProto.TError replication_error = 5;
    optional int32 status = 6; // ETableReplicaStatus
}

message TTabletInfo
{
    required NYT.NProto.TGuid tablet_id = 1;
    repeated TReplicaInfo replicas = 2;
    required int64 total_row_count = 3;
    required int64 trimmed_row_count = 4;
    optional int64 delayed_lockless_row_count = 8;
    optional uint64 barrier_timestamp = 5;
    optional uint64 last_write_timestamp = 6;
    repeated NYT.NProto.TError tablet_errors = 7;
}

message TRspGetTabletInfo
{
    repeated TTabletInfo tablets = 2;
}

////////////////////////////////////////////////////////////////////////////////

message TReqFetchTabletStores
{
    message TSubrequest
    {
        required NYT.NProto.TGuid tablet_id = 1;
        required NYT.NProto.TGuid cell_id = 9;
        optional uint64 mount_revision = 2;
        repeated NYT.NChunkClient.NProto.TReadRange ranges = 3;
        repeated int32 range_indices = 4;
        required int32 table_index = 5;
        optional int32 tablet_index = 6;
        optional bool fetch_samples = 7 [default = false];
        // Compressed data size.
        optional int32 data_size_between_samples = 8;
    }

    repeated TSubrequest subrequests = 1;

    optional bool fetch_all_meta_extensions = 2 [default = false];
    repeated int32 extension_tags = 3;

    // Do not send dynamic stores even if @enable_dynamic_store_read is set.
    optional bool omit_dynamic_stores = 4 [default = false];
}

message TRspFetchTabletStores
{
    message TSubresponse
    {
        repeated NChunkClient.NProto.TChunkSpec stores = 1;
        // COMPAT(babenko): drop this later.
        optional bool tablet_missing = 2 [default = false];
        optional NYT.NProto.TError error = 3;
    }

    // |subresponses| contain exactly one subresponse for each subrequest
    // from |subrequests| in the same order.
    repeated TSubresponse subresponses = 1;

    // Attachments contain wire-encoded samples keys. For each subrequest with
    // |fetch_samples| = true there are len(|ranges|) attachments with samples.
}

////////////////////////////////////////////////////////////////////////////////

message TReqFetchTableRows
{
    message TOptions
    {
        optional NYT.NProto.TWorkloadDescriptor workload_descriptor = 1;
    }

    required NYT.NProto.TGuid tablet_id = 1;
    required NYT.NProto.TGuid cell_id = 2;
    optional uint64 mount_revision = 3;

    // The fields below *must* be set.
    // They are marked optional for potential future extensions.
    optional int32 tablet_index = 4;
    optional int64 row_index = 5;
    optional int64 max_row_count = 6;
    optional int64 max_data_weight = 7;

    optional TOptions options = 8;
}

message TRspFetchTableRows
{
    // Attachment contains wire-encoded rows.
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetOrderedTabletSafeTrimRowCount
{
    message TSubrequest
    {
        required NYT.NProto.TGuid tablet_id = 1;
        required NYT.NProto.TGuid cell_id = 2;
        optional uint64 mount_revision = 3;

        required uint64 timestamp = 4;
    }

    repeated TSubrequest subrequests = 1;
}

message TRspGetOrderedTabletSafeTrimRowCount
{
    message TSubresponse
    {
        optional int64 safe_trim_row_count = 1;

        optional NYT.NProto.TError error = 2;
    }

    // |subresponses| contain exactly one subresponse for each subrequest from |subrequests| in the same order.
    repeated TSubresponse subresponses = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqCreateDistributedSession
{
    required NYT.NProto.TGuid session_id = 1;
    required int64 retention_time = 2;
    required int32 codec = 3; // ECodec
    optional uint64 memory_limit_per_node = 4;
}

message TRspCreateDistributedSession
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqPingDistributedSession
{
    required NYT.NProto.TGuid session_id = 1;
    repeated string nodes_with_propagated_session = 2;
}

message TRspPingDistributedSession
{
    repeated string nodes_to_propagate_session_onto = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqCloseDistributedSession
{
    required NYT.NProto.TGuid session_id = 1;
}

message TRspCloseDistributedSession
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqPushRowset
{
    required NYT.NProto.TGuid session_id = 1;
    required NYT.NProto.TGuid rowset_id = 2;
    required NYT.NTableClient.NProto.TTableSchemaExt schema = 3;
    // Attachments contain wire-encoded data.
}

message TRspPushRowset
{ }

////////////////////////////////////////////////////////////////////////////////
