# This file was generated by the YaTool build system (https://github.com/yandex/yatool),
# from a source YaTool build configuration provided in ya.make files.
#
# If the repository supports both CMake and ya build configurations, please modify both of them.
#
# If only CMake build configuration is supported then modify only CMake files and note that only
# simple modifications are allowed like adding source-files to targets or adding simple properties
# like target_include_directories. These modifications will be ported to original ya.make files
# by maintainers. Any complex modifications which can't be easily ported back to the ya build
# system may be rejected.
#
# Please refer to the build instructions in the repository for more information about manual
# changes in this file.

add_executable(unittester-core-concurrency)


target_compile_options(unittester-core-concurrency PRIVATE
  -Wdeprecated-this-capture
  -Wimplicit-fallthrough
)

target_link_libraries(unittester-core-concurrency PUBLIC
  contrib-libs-cxxsupp
  yutil
  cpp-testing-gtest
  cpp-testing-gtest_main
  yt-yt-core
  yt-core-test_framework
  cpp-json-yson
  cpp-threading-future
)

target_allocator(unittester-core-concurrency
  system_allocator
)

target_link_options(unittester-core-concurrency PRIVATE
  -Wl,-platform_version,macos,11.0,11.0
  -fPIC
  -fPIC
  -framework
  CoreFoundation
)

target_sources(unittester-core-concurrency PRIVATE
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/arcadia_interop_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/async_barrier_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/async_looper_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/async_rw_lock_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/async_semaphore_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/async_stream_pipe_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/async_stream_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/async_yson_writer_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/bounded_concurrency_invoker_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/coroutines_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/count_down_latch_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/delayed_executor_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/fair_share_action_queue_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/fair_share_invoker_pool_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/fair_share_thread_pool_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/fair_throttler_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/fls_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/invoker_alarm_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/invoker_pool_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/nonblocking_batcher_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/nonblocking_queue_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/parallel_runner_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/periodic_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/profiled_fair_share_invoker_pool_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/propagating_storage_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/quantized_executor_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/scheduled_executor_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/scheduler_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/suspendable_action_queue_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/thread_affinity_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/thread_pool_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/thread_pool_poller_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/throughput_throttler_ut.cpp
  ${PROJECT_SOURCE_DIR}/yt/yt/core/concurrency/unittests/two_level_fair_share_thread_pool_ut.cpp
)


add_test(
  NAME
  unittester-core-concurrency
  COMMAND
  unittester-core-concurrency
)

set_property(
  TEST
  unittester-core-concurrency
  PROPERTY
  LABELS
  LARGE
)

set_property(
  TEST
  unittester-core-concurrency
  PROPERTY
  ENVIRONMENT
)

vcs_info(unittester-core-concurrency)

set_property(
  TEST
  unittester-core-concurrency
  PROPERTY
  PROCESSORS
  1
)
