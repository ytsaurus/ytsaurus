package NYT.NTableClient.NProto;

import "yt/ytlib/hive/proto/cell_directory.proto";
import "yt_proto/yt/client/chaos_client/proto/replication_card.proto";
import "yt_proto/yt/client/table_chunk_format/proto/chunk_meta.proto";
import "yt_proto/yt/core/misc/proto/guid.proto";
import "yt/ytlib/tablet_client/proto/backup.proto";

////////////////////////////////////////////////////////////////////////////////

message TReqMount
{
    // If omitted then all tablets are affected.
    required int32 first_tablet_index = 1 [default = -1];
    required int32 last_tablet_index = 2 [default = -1];

    // If omitted then cell is chosen automatically.
    optional NYT.NProto.TGuid cell_id = 3;

    required bool freeze = 4;
    optional uint64 mount_timestamp = 5 [default = 0];

    repeated NYT.NProto.TGuid target_cell_ids = 6;
}

message TRspMount
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqUnmount
{
    // If omitted then all tablets are affected.
    required int32 first_tablet_index = 1 [default = -1];
    required int32 last_tablet_index = 2 [default = -1];
    required bool force = 3 [default = false];
}

message TRspUnmount
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqRemount
{
    // If omitted then all tablets are affected.
    required int32 first_tablet_index = 1 [default = -1];
    required int32 last_tablet_index = 2 [default = -1];
}

message TRspRemount
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqFreeze
{
    // If omitted then all tablets are affected.
    required int32 first_tablet_index = 1 [default = -1];
    required int32 last_tablet_index = 2 [default = -1];
}

message TRspFreeze
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqUnfreeze
{
    // If omitted then all tablets are affected.
    required int32 first_tablet_index = 1 [default = -1];
    required int32 last_tablet_index = 2 [default = -1];
}

message TRspUnfreeze
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqReshard
{
    // If omitted then all tablets are affected.
    required int32 first_tablet_index = 1 [default = -1];
    required int32 last_tablet_index = 2 [default = -1];
    // For sorted tables only.
    repeated bytes pivot_keys = 3;
    required int32 tablet_count = 4;
}

message TRspReshard
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqReshardAutomatic
{
    required bool keep_actions = 1 [default = false];
}

message TRspReshardAutomatic
{
    repeated NYT.NProto.TGuid tablet_actions = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetMountInfo
{ }

message TTabletInfo
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 mount_revision = 7;
    required int32 state = 2; // ETabletState
    required int32 in_memory_mode = 8; // EInMemoryMode
    optional bytes pivot_key = 3;
    optional NYT.NProto.TGuid cell_id = 4;
    optional int32 cell_config_version = 5;
}

message TReplicaInfo
{
    required NYT.NProto.TGuid replica_id = 1;
    required string cluster_name = 2;
    required string replica_path = 3;
    required int32 mode = 4; // ETableReplicaMode
}

message TIndexInfo
{
    required NYT.NProto.TGuid index_table_id = 1;
    required int32 index_kind = 2; // NTableClient::ESecondaryIndexKind
    optional string predicate = 3;
    optional string unfolded_column = 4;
    optional int32 index_correspondence = 6; // NTableClient::ETableToIndexCorrespondence
}

message TRspGetMountInfo
{
    required NYT.NProto.TGuid table_id = 1;
    optional TTableSchemaExt schema = 2;
    repeated TTabletInfo tablets = 3;
    repeated NYT.NHiveClient.NProto.TCellDescriptor tablet_cells = 4;
    optional bool dynamic = 5;
    optional NYT.NProto.TGuid upstream_replica_id = 6;
    repeated TReplicaInfo replicas = 7;
    optional bool enable_detailed_profiling = 8;
    optional NYT.NProto.TGuid replication_card_id = 9; // NChaosClient::TReplicationCardId
    optional NYT.NProto.TGuid hunk_storage_id = 10;
    repeated TIndexInfo indices = 11;
    reserved 12; // Deprecated
    optional int32 tablet_count = 13; // Queue tablet count for chaos replicated tables
    optional int32 serialization_type = 14 [default = 0]; // ETabletTransactionSerializationType [default = Coarse]
}

////////////////////////////////////////////////////////////////////////////////

message TReqAlter
{
    optional TTableSchemaExt schema = 1;
    optional bool dynamic = 2;
    optional NYT.NProto.TGuid upstream_replica_id = 3;
    optional int32 schema_modification = 4; // ETableSchemaModification
    optional NYT.NChaosClient.NProto.TReplicationProgress replication_progress = 5;
    optional NYT.NProto.TGuid schema_id = 6;
}

message TRspAlter
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqLockDynamicTable
{
    required uint64 timestamp = 1;
}

message TRspLockDynamicTable
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqCheckDynamicTableLock
{ }

message TRspCheckDynamicTableLock
{
    required bool confirmed = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqStartBackup
{
    required uint64 timestamp = 1;
    required int32 backup_mode = 2; // EBackupMode

    // Replica tables only.
    optional NYT.NProto.TGuid upstream_replica_id = 3;
    optional uint32 clock_cluster_tag = 4;

    // Replicated tables only.
    repeated NYT.NTabletClient.NProto.TTableReplicaBackupDescriptor replicas = 5;
}

message TRspStartBackup
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqStartRestore
{
    // Replicated tables only.
    repeated NYT.NTabletClient.NProto.TTableReplicaBackupDescriptor replicas = 1;
}

message TRspStartRestore
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqFinishBackup
{ }

message TRspFinishBackup
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqFinishRestore
{ }

message TRspFinishRestore
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqCheckBackup
{ }

message TRspCheckBackup
{
    required int32 pending_tablet_count = 1;
    required int32 confirmed_tablet_count = 2;
}

////////////////////////////////////////////////////////////////////////////////
