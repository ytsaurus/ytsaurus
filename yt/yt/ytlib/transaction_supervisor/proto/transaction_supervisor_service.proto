package NYT.NTransactionSupervisor.NProto.NTransactionSupervisor;

import "yt_proto/yt/client/hive/proto/timestamp_map.proto";
import "yt_proto/yt/core/misc/proto/error.proto";
import "yt_proto/yt/core/misc/proto/guid.proto";

////////////////////////////////////////////////////////////////////////////////

message TReqCommitTransaction
{
    required NYT.NProto.TGuid transaction_id = 1;
    repeated NYT.NProto.TGuid participant_cell_ids = 2;
    repeated NYT.NProto.TGuid prepare_only_participant_cell_ids = 7;
    repeated NYT.NProto.TGuid cell_ids_to_sync_with_before_prepare = 8;
    required bool force_2pc = 3;
    optional bool generate_prepare_timestamp = 6 [default = true];
    required bool inherit_commit_timestamp = 4;
    optional int32 coordinator_prepare_mode = 11; // ETransactionCoordinatorPrepareMode
    optional int32 coordinator_commit_mode = 5; // ETransactionCoordinatorCommitMode
    optional uint64 max_allowed_commit_timestamp = 9;
    optional int32 clock_cluster_tag = 10;
    optional bool strongly_ordered = 12 [default = false];
}

message TRspCommitTransaction
{
    required NYT.NHiveClient.NProto.TTimestampMap commit_timestamps = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqAbortTransaction
{
    required NYT.NProto.TGuid transaction_id = 1;
    optional bool force = 2 [default = false];
}

message TRspAbortTransaction
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqPingTransaction
{
    required NYT.NProto.TGuid transaction_id = 1;
    // Only makes sense for master transactions.
    // COMPAT(h0pless): Can probably be removed when CTxS will be used by clients.
    optional bool ping_ancestors = 2 [default = false];
}

message TRspPingTransaction
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqPingTransactions
{
    message TSubrequest
    {
        // NB: Repeats TReqPingTransaction fields.
        required NYT.NProto.TGuid transaction_id = 1;
        optional bool ping_ancestors = 2 [default = false];
    }

    repeated TSubrequest subrequests = 1;
}

message TRspPingTransactions
{ 
    message TSubresponse
    {
        optional NYT.NProto.TError error = 1;
    } 

    repeated TSubresponse subresponses = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetDownedParticipants
{
    repeated NYT.NProto.TGuid cell_ids = 1;
}

message TRspGetDownedParticipants
{
    repeated NYT.NProto.TGuid cell_ids = 1;
}

////////////////////////////////////////////////////////////////////////////////
