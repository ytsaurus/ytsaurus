package NYT.NTabletClient.NProto;

import "yt/ytlib/transaction_client/proto/action.proto";

import "yt_proto/yt/client/table_chunk_format/proto/chunk_meta.proto";

import "yt_proto/yt/core/misc/proto/guid.proto";

////////////////////////////////////////////////////////////////////////////////

message THunkChunksInfo
{
    required NYT.NProto.TGuid hunk_cell_id = 1;
    required NYT.NProto.TGuid hunk_tablet_id = 2;
    required uint64 hunk_mount_revision = 3;
    repeated NYT.NTableClient.NProto.THunkChunkRef hunk_chunk_refs = 4;
}

////////////////////////////////////////////////////////////////////////////////

message TReqWrite
{
    required NYT.NProto.TGuid transaction_id = 1;
    optional uint64 transaction_start_timestamp = 2;
    optional int64 transaction_timeout = 3;
    required NYT.NProto.TGuid tablet_id = 4;
    required uint64 mount_revision = 5;
    required int32 durability = 6; // EDurability
    optional uint32 prepare_signature = 7;
    optional uint32 commit_signature = 16;
    optional uint32 generation = 14;
    required int32 request_codec = 8; // ECodec
    required int32 row_count = 9;
    required bool versioned = 10;
    repeated NYT.NProto.TGuid sync_replica_ids = 11;
    optional NYT.NProto.TGuid upstream_replica_id = 12;
    optional int64 data_weight = 13 [default = 0];
    optional uint64 replication_era = 15 [default = 0];
    optional THunkChunksInfo hunk_chunks_info = 17;
    repeated NYT.NProto.TGuid prerequisite_transaction_ids = 18;
    // Attachment contains wire-encoded data.
}

message TRspWrite
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqRegisterTransactionActions
{
    required NYT.NProto.TGuid transaction_id = 1;
    required uint64 transaction_start_timestamp = 2;
    required int64 transaction_timeout = 3;
    required uint64 signature = 4;
    repeated NYT.NTransactionClient.NProto.TTransactionActionData actions = 5;
    optional string user = 6;
    optional string user_tag = 7;
    optional NYT.NProto.TGuid externalization_token = 8;
}

message TRspRegisterTransactionActions
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqTrim
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 mount_revision = 2;
    required int64 trimmed_row_count = 3;
}

message TRspTrim
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqSuspendTabletCell
{ }

message TRspSuspendTabletCell
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqResumeTabletCell
{ }

message TRspResumeTabletCell
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqWriteHunks
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 mount_revision = 2;

    // Payloads are passed via attachments.
}

message TRspWriteHunks
{
    message TDescriptor
    {
        required NYT.NProto.TGuid chunk_id = 1;
        required int32 record_index = 2;
        required int32 record_offset = 3;
        required int32 length = 4;
        optional int32 erasure_codec = 5; // ECodec
        optional int64 record_size = 6;
    }
    repeated TDescriptor descriptors = 1;
}

////////////////////////////////////////////////////////////////////////////////

// For hunk storage tablet cell.
message TReqToggleHunkTabletStoreLock
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 mount_revision = 2;
    required NYT.NProto.TGuid store_id = 3;
    required NYT.NProto.TGuid locker_tablet_id = 4;

    //! If true, store is locked.
    //! If false, store is unlocked.
    required bool lock = 5;
}

// For regular table tablet cell.
message TReqBoggleHunkTabletStoreLock
{
    required NYT.NProto.TGuid hunk_tablet_id = 1;
    required uint64 mount_revision = 2;
    required NYT.NProto.TGuid store_id = 3;
    required NYT.NProto.TGuid hunk_cell_id = 4;
    required NYT.NProto.TGuid tablet_id = 6;
    required int32 term = 7;

    //! If true, store is locked.
    //! If false, store is unlocked.
    required bool lock = 5;
}

////////////////////////////////////////////////////////////////////////////////
