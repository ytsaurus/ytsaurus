package NYT.NObjectClient.NProto;

import "yt_proto/yt/core/misc/proto/guid.proto";
import "yt_proto/yt/core/rpc/proto/rpc.proto";
import "yt/ytlib/security_client/proto/acl.proto";

////////////////////////////////////////////////////////////////////////////////

// Describes a transaction that must be alive in order for the request to be executed.
message TPrerequisiteTransaction
{
    required NYT.NProto.TGuid transaction_id = 1;
}

// Describes node revision that must match in order for the request to be executed.
message TPrerequisiteRevision
{
    required string path = 1;
    reserved 2;
    required uint64 revision = 3;
}

message TPrerequisitesExt
{
    extend NRpc.NProto.TRequestHeader
    {
        optional TPrerequisitesExt prerequisites_ext = 109;
    }

    repeated TPrerequisiteTransaction transactions = 1;
    repeated TPrerequisiteRevision revisions = 2;
}

message TMulticellSyncExt
{
    extend NRpc.NProto.TRequestHeader
    {
        optional TMulticellSyncExt multicell_sync_ext = 112;
    }

    repeated uint32 cell_tags_to_sync_with = 1;

    // If |true|, the master responding to the query will make no attempt to
    // synchronize its state with the upstream servers.
    optional bool suppress_upstream_sync = 2 [default = false];

    // If |true|, the master responding to the query will make no attempt to
    // synchronize its state with transaction coordinator servers.
    optional bool suppress_transaction_coordinator_sync = 3 [default = false];
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetBasicAttributes
{
    message TColumns
    {
        repeated string items = 1;
    }

    optional int32 permission = 1; // EPermission
    optional TColumns columns = 2;
    optional bool omit_inaccessible_columns = 3;
    optional bool omit_inaccessible_rows = 5;
    optional bool populate_security_tags = 4;
}

message TRspGetBasicAttributes
{
    message TColumns
    {
        repeated string items = 1;
    }

    message TSecurityTags
    {
        repeated string items = 1;
    }

    message TRowLevelAccessControlEntries
    {
        repeated NYT.NSecurityClient.NProto.TRowLevelAccessControlEntry items = 1;
    }

    required NYT.NProto.TGuid object_id = 1;
    // This is typically deducible from |object_id| but for virtual tables
    // this is not the case.
    // COMPAT(babenko): make required in 25.1
    optional int32 type = 9; // EObjectType
    optional uint32 external_cell_tag = 2;
    optional NYT.NProto.TGuid external_transaction_id = 5;
    optional TColumns omitted_inaccessible_columns = 3;
    optional TSecurityTags security_tags = 4;
    optional uint64 revision = 6;
    optional uint64 content_revision = 7;
    optional uint64 attribute_revision = 8;
    optional int64 chunk_count = 10;
    optional TRowLevelAccessControlEntries rlaces = 11;
}

////////////////////////////////////////////////////////////////////////////////

message TReqCheckPermission
{
    required string user = 1;
    required int32 permission = 2; // EPermission
    optional bool ignore_safe_mode = 4;

    message TColumns
    {
        repeated string items = 1;
    }
    optional TColumns columns = 3;

    optional bool vital = 5;
}

message TRspCheckPermission
{
    message TResult
    {
        required int32 action = 1; // ESecurityAction
        optional NYT.NProto.TGuid object_id = 2;
        optional string object_name = 5;
        optional NYT.NProto.TGuid subject_id = 4;
        optional string subject_name = 3;
    }

    message TColumns
    {
        repeated TResult items = 1;
    }

    message TRowLevelAccessControlEntries
    {
        repeated NYT.NSecurityClient.NProto.TRowLevelAccessControlEntry items = 1;
    }

    required int32 action = 1; // ESecurityAction
    optional NYT.NProto.TGuid object_id = 2;
    optional string object_name = 5;
    optional NYT.NProto.TGuid subject_id = 4;
    optional string subject_name = 3;
    optional TColumns columns = 6;
    optional TRowLevelAccessControlEntries rlaces = 7;
}

////////////////////////////////////////////////////////////////////////////////
