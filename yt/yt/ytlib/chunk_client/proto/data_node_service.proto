package NYT.NChunkClient.NProto;

import "yt_proto/yt/core/misc/proto/guid.proto";
import "yt_proto/yt/core/misc/proto/error.proto";
import "yt_proto/yt/client/misc/proto/workload.proto";
import "yt_proto/yt/client/node_tracker_client/proto/node.proto";
import "yt/ytlib/chunk_client/proto/chunk_info.proto";
import "yt_proto/yt/client/chunk_client/proto/chunk_meta.proto";
import "yt_proto/yt/client/chunk_client/proto/read_limit.proto";
import "yt/ytlib/chunk_client/proto/chunk_reader_statistics.proto";
import "yt/ytlib/chunk_client/proto/chunk_slice.proto";
import "yt/ytlib/chunk_client/proto/chunk_writer_statistics.proto";
import "yt/ytlib/chunk_client/proto/session_id.proto";
import "yt_proto/yt/client/table_chunk_format/proto/chunk_meta.proto";
import "yt_proto/yt/client/table_chunk_format/proto/wire_protocol.proto";

////////////////////////////////////////////////////////////////////////////////

message TAllyReplicasInfo
{
    repeated uint64 replicas = 1;
    required uint64 revision = 2;
}

////////////////////////////////////////////////////////////////////////////////

message TP2PBarrier
{
    required NYT.NProto.TGuid session_id = 1;
    required int64 iteration = 2;

    // Workaround for hedging. See note in replication_reader.cpp.
    optional int32 if_node_id = 3;
}

message TPeerDescriptor
{
    required int32 block_index = 1;
    repeated uint32 node_ids = 3;

    reserved 2;

    optional TP2PBarrier delivery_barier = 4;
}

////////////////////////////////////////////////////////////////////////////////

message TReqStartChunk
{
    required TSessionId session_id = 7;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 2;
    optional bool sync_on_close = 3 [default = true];
    optional bool enable_direct_io = 8 [default = false];
    optional bool enable_multiplexing = 4 [default = false];
    optional NYT.NProto.TGuid placement_id = 6;
    optional bool disable_send_blocks = 9 [default = false];
}

message TRspStartChunk
{
    // COMPAT(kvk1920): Make this field required.
    optional NYT.NProto.TGuid location_uuid = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqFinishChunk
{
    required TSessionId session_id = 4;
    optional TChunkMeta chunk_meta = 2;
    optional int32 block_count = 3;
    optional bool ignore_missing_session = 5 [default = false];
}

message TRspFinishChunk
{
    required TChunkInfo chunk_info = 1;
    optional TChunkWriterStatistics chunk_writer_statistics = 2;
}

////////////////////////////////////////////////////////////////////////////////

message TReqCancelChunk
{
    required TSessionId session_id = 2;
    optional bool wait_for_cancelation = 3;
}

message TRspCancelChunk
{ }

////////////////////////////////////////////////////////////////////////////////

//! Used in replication writer.
message TReqPutBlocks
{
    required TSessionId session_id = 7;
    required int32 first_block_index = 2;
    optional bool populate_cache = 5 [default = false];
    optional bool flush_blocks = 6 [default = false];

    // Might be empty, or contain NullChecksum.
    repeated fixed64 block_checksums = 8;

    optional int64 cumulative_block_size = 9;
}

message TPutBlocksStatistics
{
    optional int64 data_bytes_written_to_medium = 1;
    optional int64 io_requests = 2;
}

message TRspPutBlocks
{
    optional bool close_demanded = 1 [default = false];
    // TODO(ngc224): deprecate in favor of chunk_writer_statistics
    optional TPutBlocksStatistics statistics = 2;
    optional TChunkWriterStatistics chunk_writer_statistics = 3;
}

////////////////////////////////////////////////////////////////////////////////

//! Used in replication writer when asking one node to send data to another node.
message TReqSendBlocks
{
    required TSessionId session_id = 5;
    required NYT.NNodeTrackerClient.NProto.TNodeDescriptor target_descriptor = 2;
    required int32 first_block_index = 3;
    required int32 block_count = 4;
    optional int64 cumulative_block_size = 6;
}

message TRspSendBlocks
{
    optional bool close_demanded = 1 [default = false];
}

////////////////////////////////////////////////////////////////////////////////

message TReqFlushBlocks
{
    required TSessionId session_id = 3;
    required int32 block_index = 2;
}

message TRspFlushBlocks
{
    optional bool close_demanded = 1 [default = false];
    optional TChunkWriterStatistics chunk_writer_statistics = 2;
}

////////////////////////////////////////////////////////////////////////////////

message TReqUpdateP2PBlocks
{
    required int32 source_node_id = 7;
    required NYT.NProto.TGuid session_id = 1;
    required int64 iteration = 2;

    repeated NYT.NProto.TGuid chunk_ids = 3;
    repeated int32 chunk_block_count = 8;
    repeated int32 block_indexes = 4;

    repeated fixed64 block_checksums = 5;
}

message TRspUpdateP2PBlocks
{
    required bool session_created = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqProbeChunkSet
{
    repeated NYT.NProto.TGuid chunk_ids = 1;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 3;
    repeated uint64 ally_replicas_revisions = 4;
}

message TRspProbeChunkSet
{
    message TSubresponse
    {
        required bool has_complete_chunk = 1;
        optional TAllyReplicasInfo ally_replicas = 5;

        required bool disk_throttling = 3;
        required int64 disk_queue_size = 4;

        reserved 2;
    }

    required bool net_throttling = 1;
    required int64 net_queue_size = 2;

    repeated TSubresponse subresponses = 3;
}

////////////////////////////////////////////////////////////////////////////////

message TProbeBlockSetBlockInfo
{
    required int32 block_index = 1;
    required int64 block_size = 2;
}

message TReqProbeBlockSet
{
    required NYT.NProto.TGuid chunk_id = 1;
    repeated int32 block_indexes = 2;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 3;
    optional uint64 ally_replicas_revision = 4;
}

message TRspProbeBlockSet
{
    repeated TPeerDescriptor peer_descriptors = 1;
    optional TAllyReplicasInfo ally_replicas = 7;
    required bool has_complete_chunk = 2;
    required bool net_throttling = 3;
    required int64 net_queue_size = 4;
    required bool disk_throttling = 5;
    required int64 disk_queue_size = 6;
    repeated TProbeBlockSetBlockInfo cached_blocks = 8;
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetBlockSet
{
    required NYT.NProto.TGuid chunk_id = 1;
    repeated int32 block_indexes = 2;
    optional bool populate_cache = 5 [default = true];
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 6;
    // COMPAT(babenko): drop once all clusters support ProbeBlockSet
    optional bool fetch_from_cache = 7 [default = true];
    // COMPAT(babenko): drop once all clusters support ProbeBlockSet
    optional bool fetch_from_disk = 8 [default = true];

    repeated TP2PBarrier wait_barriers = 11;
    optional NYT.NProto.TGuid read_session_id = 12;

    optional uint64 ally_replicas_revision = 13;

    reserved 3, 4, 9;
}

message TRspGetBlockSet
{
    repeated TPeerDescriptor peer_descriptors = 1;
    optional TAllyReplicasInfo ally_replicas = 11;
    required bool has_complete_chunk = 3;
    required bool net_throttling = 5;
    required int64 net_queue_size = 6;
    required bool disk_throttling = 7;
    required int64 disk_queue_size = 8;
    optional TChunkReaderStatistics chunk_reader_statistics = 10;
    repeated fixed64 block_checksums = 9;

    // Blocks are returned via attachments and correspond to block_indexes
    // list in the request. Some blocks may be null.
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetBlockRange
{
    required NYT.NProto.TGuid chunk_id = 1;
    required int32 first_block_index = 2;
    required int32 block_count = 3;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 4;
    optional bool populate_cache = 5 [default = true];
    optional NYT.NProto.TGuid read_session_id = 6;
}

message TRspGetBlockRange
{
    required bool has_complete_chunk = 1;
    required bool net_throttling = 3;
    required int64 net_queue_size = 4;
    required bool disk_throttling = 5;
    required int64 disk_queue_size = 6;
    optional TChunkReaderStatistics chunk_reader_statistics = 8;
    repeated fixed64 block_checksums = 7;

    // Blocks are returned via attachments and correspond to a prefix of
    // the requested range.
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetChunkFragmentSet
{
    required NYT.NProto.TGuid read_session_id = 1;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 2;
    optional bool use_direct_io = 4;

    message TSubrequest
    {
        required NYT.NProto.TGuid chunk_id = 1;
        optional uint64 ally_replicas_revision = 3;

        message TFragment
        {
            // Length of the fragment.
            required int32 length = 1;
            // Chunk-wise block index.
            required int32 block_index = 2;
            // Block-wise offset.
            required int64 block_offset = 3;
        }

        repeated TFragment fragments = 2;
    }

    repeated TSubrequest subrequests = 3;
}

message TRspGetChunkFragmentSet
{
    message TSubresponse
    {
        required bool has_complete_chunk = 1;
        optional TAllyReplicasInfo ally_replicas = 4;
        optional bool disk_throttling = 5 [default = false];

        reserved 2, 3;
    }

    repeated TSubresponse subresponses = 1;

    optional TChunkReaderStatistics chunk_reader_statistics = 2;

    optional bool net_throttling = 3 [default = false];

    // Block fragments are returned via attachments and correspond to the flattened list
    // of all fragment subrequests. Some attachments can be null (if the requested chunk is missing
    // or a node is unable to complete the request due to throttling).
    // No checksums are validated by the node (since there could be no checksums for arbitrary block fragments).
    // Readers are encouraged to run consistency checks on their own (e.g. embed checksums into block fragments).
}

////////////////////////////////////////////////////////////////////////////////

message TReqLookupRows
{
    message TTableSchemaData
    {
        required NYT.NProto.TGuid table_id = 1;
        required uint64 revision = 2;
        optional int64 schema_size = 3;
        optional NTableClient.NProto.TTableSchemaExt schema = 8;
    }

    required NYT.NProto.TGuid chunk_id = 1;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 3;
    required NYT.NProto.TGuid read_session_id = 4;
    required bool produce_all_versions = 5;
    optional NTableClient.NProto.TColumnFilter column_filter = 7;
    optional uint64 timestamp = 8;
    optional int32 compression_codec = 9;
    optional uint64 override_timestamp = 10;
    required TTableSchemaData schema_data = 6;
    optional bool enable_hash_chunk_index = 13;
    optional bool use_direct_io = 14;

    optional bool populate_cache = 11 [default = true];

    // Lookup keys are passed via attachments.

    reserved 12;
}

message TRspLookupRows
{
    // Found rows are returned via attachment.
    required bool fetched_rows = 1;
    optional bool request_schema = 2;

    optional TChunkReaderStatistics chunk_reader_statistics = 3;

    optional bool net_throttling = 4 [default = false];
    optional bool disk_throttling = 5 [default = false];

    optional int64 net_queue_size = 6 [default = 0];
    optional int64 disk_queue_size = 7 [default = 0];

    reserved 8;
}

////////////////////////////////////////////////////////////////////////////////

message TReqPingSession
{
    required TSessionId session_id = 2;
}

message TRspPingSession
{
    optional bool close_demanded = 1 [default = false];
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetChunkMeta
{
    required NYT.NProto.TGuid chunk_id = 1;
    optional int32 medium_index = 7;
    repeated int32 extension_tags = 2;
    // If true, then extension_tags are ignored and
    // the whole available meta is returned.
    optional bool all_extension_tags = 3 [default = false];
    optional int32 partition_tag = 4;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 5;

    // COMPAT(psushin).
    optional bool enable_throttling = 6 [default = false];

    // Bitmask of the chunk features that are supported by client.
    // If requested chunk uses features that are not supported by client,
    // an error is returned.
    optional uint64 supported_chunk_features = 8;
}

message TRspGetChunkMeta
{
    optional TChunkMeta chunk_meta = 1;
    optional bool net_throttling = 2 [default = false];
    optional TChunkReaderStatistics chunk_reader_statistics = 3;
    optional NYT.NProto.TGuid location_uuid = 4;
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetChunkSliceDataWeights
{
    message TChunkSlice
    {
        required NYT.NProto.TGuid chunk_id = 1;
        optional TReadLimit lower_limit = 2;
        optional TReadLimit upper_limit = 3;
        optional NTableClient.NProto.TColumnFilter column_filter = 4;
    }

    repeated TChunkSlice chunk_requests = 1;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 4;
    // Name table for mapping column ids to column names across the whole request.
    // Required if any column filter is set.
    optional NYT.NTableClient.NProto.TNameTableExt name_table = 5;
}

message TRspGetChunkSliceDataWeights
{
    message TWeightedChunk
    {
        optional NYT.NProto.TError error = 1;
        optional int64 data_weight = 2;
    }

    repeated TWeightedChunk chunk_responses = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqUpdatePeer
{
    reserved 2;
    reserved 1;
    reserved 3;
    reserved 4;
}

message TRspUpdatePeer
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqGetTableSamples
{
    message TSampleRequest
    {
        required NYT.NProto.TGuid chunk_id = 1;
        required int32 sample_count = 2;
        optional bytes lower_key = 3;
        optional bytes upper_key = 4;
    }

    repeated TSampleRequest sample_requests = 1;
    repeated string key_columns = 2;
    required int32 max_sample_size = 3;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 4;
    required int32 sampling_policy = 5; // ESamplingPolicy

    reserved 6;
}

message TRspGetTableSamples
{
    message TSample
    {
        required bool incomplete = 2;
        required int64 weight = 3;
        required int32 key_index = 4;

        reserved 1;
    }

    message TChunkSamples
    {
        optional NYT.NProto.TError error = 1;
        repeated TSample samples = 3;

        reserved 2;
    }

    repeated TChunkSamples sample_responses = 1;

    reserved 2;
}

////////////////////////////////////////////////////////////////////////////////

// For sorted chunks only.
// Scheduler calls this method to perform sorted merge, reduce, join, etc.
message TReqGetChunkSlices
{
    repeated TSliceRequest slice_requests = 1;

    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 5;

    reserved 2, 3, 4, 6, 7;
}

message TRspGetChunkSlices
{
    message TSliceResponse
    {
        optional NYT.NProto.TError error = 1;
        repeated TChunkSlice chunk_slices = 3;

        reserved 2;
    }

    repeated TSliceResponse slice_responses = 1;

    reserved 2;
}

////////////////////////////////////////////////////////////////////////////////

// Scheduler calls this method to get a better estimation for input data weight.
// Such information is also exposed to a client via an API method.
message TReqGetColumnarStatistics
{
    required NYT.NTableClient.NProto.TNameTableExt name_table = 1;
    message TSubrequest
    {
        required NYT.NProto.TGuid chunk_id = 1;
        repeated int32 column_ids = 2;
        optional bool enable_read_size_estimation = 3;
    }

    repeated TSubrequest subrequests = 2;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 3;
    optional bool enable_early_finish = 4;
}

message TRspGetColumnarStatistics
{
    message TSubresponse
    {
        optional NYT.NProto.TError error = 1;

        reserved 2, 3;

        // Either error or the following two fields are set.
        optional NYT.NTableClient.NProto.TColumnarStatisticsExt columnar_statistics = 4;
        optional NYT.NTableClient.NProto.TLargeColumnarStatisticsExt large_columnar_statistics = 5;

        // This field provides an estimate of the byte size of data expected to be read from disk.
        // It gives a more accurate size estimation when reading subsets of columns from a column group,
        // compared to older per-column statistics methods.
        // Since columns within a single group are written to the same chunk block, and the smallest
        // reading unit is a chunk block, relying solely on per-column statistics can lead to inaccurate
        // read size estimates. This is because a column with small data values could be stored alongside
        // a column with large data values within the same group, necessitating the reading of the entire
        // chunk block. Hence, this estimation accounts for such scenarios and improves job splitting.
        optional int64 read_data_size_estimate = 6;
    }

    repeated TSubresponse subresponses = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqDisableChunkLocations
{
    repeated NYT.NProto.TGuid location_uuids = 1;
}

message TRspDisableChunkLocations
{
    repeated NYT.NProto.TGuid location_uuids = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqDestroyChunkLocations
{
    repeated NYT.NProto.TGuid location_uuids = 1;
    optional bool recover_unlinked_disks = 2 [default = false];
}

message TRspDestroyChunkLocations
{
    repeated NYT.NProto.TGuid location_uuids = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqResurrectChunkLocations
{
    repeated NYT.NProto.TGuid location_uuids = 2;
}

message TRspResurrectChunkLocations
{
    repeated NYT.NProto.TGuid location_uuids = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TChunkReplicaAnnouncement
{
    required NYT.NProto.TGuid chunk_id = 1;
    repeated fixed64 replicas = 2;
    required uint64 revision = 3;
}

message TReqAnnounceChunkReplicas
{
    required int32 source_node_id = 1;
    repeated TChunkReplicaAnnouncement announcements = 2;
}

message TRspAnnounceChunkReplicas
{ }

////////////////////////////////////////////////////////////////////////////////
