package NYT.NChunkClient.NProto;

// Basic YPath RPC for all types of chunk list owners (tables, files, and journals).

import "yt_proto/yt/core/crypto/proto/crypto.proto";
import "yt_proto/yt/core/misc/proto/guid.proto";
import "yt_proto/yt/client/node_tracker_client/proto/node_directory.proto";
import "yt_proto/yt/client/chunk_client/proto/chunk_meta.proto";
import "yt_proto/yt/client/chunk_client/proto/read_limit.proto";
import "yt_proto/yt/client/chunk_client/proto/chunk_spec.proto";
import "yt_proto/yt/client/chunk_client/proto/data_statistics.proto";
import "yt_proto/yt/client/table_chunk_format/proto/chunk_meta.proto";

////////////////////////////////////////////////////////////////////////////////

message TReqBeginUpload
{
    required int32 update_mode = 1;
    required int32 lock_mode = 2;
    // Only used during primary-to-secondary replication.
    optional NYT.NProto.TGuid upload_transaction_id = 3;
    optional string upload_transaction_title = 4;
    optional int64 upload_transaction_timeout = 5;
    // If the node is external, the upload transaction will automatically
    // be replicated to the corresponding secondary cell. This list
    // may provide additional cells to replicate the transaction to.
    // This is useful, e.g., in implementing "concat" command.
    repeated uint32 upload_transaction_secondary_cell_tags = 6;
    repeated NYT.NProto.TGuid upload_prerequisite_transaction_ids = 13;
    optional NYT.NTableClient.NProto.TTableSchemaExt table_schema = 7;
    optional int32 schema_mode = 8; // ETableSchemaMode
    optional int32 optimize_for = 9; // EOptimizeFor
    optional NYT.NTableClient.NProto.TTableSchemaExt chunk_schema = 10;
    optional NYT.NProto.TGuid table_schema_id = 11;
    optional NYT.NProto.TGuid chunk_schema_id = 12;
}

message TRspBeginUpload
{
    required NYT.NProto.TGuid upload_transaction_id = 1;
    required uint32 cell_tag = 2;
    optional NYT.NProto.TGuid upload_chunk_schema_id = 3;
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetUploadParams
{
    optional bool fetch_last_key = 1 [default = false];
    optional bool fetch_hunk_chunk_list_ids = 2 [default = false];
}

message TRspGetUploadParams
{
    optional NYT.NProto.TGuid chunk_list_id = 1;
    optional bytes last_key = 2;
    optional NYT.NCrypto.NProto.TMD5Hasher md5_hasher = 3;
    repeated NYT.NProto.TGuid tablet_chunk_list_ids = 4;
    repeated NYT.NProto.TGuid tablet_hunk_chunk_list_ids = 8;
    repeated bytes pivot_keys = 5;
    optional int32 max_heavy_columns = 6;
    optional int64 row_count = 7 [default = 0];
}

////////////////////////////////////////////////////////////////////////////////

// Don't forget to patch corresponding replication method in EndUpload
// when adding new fields to this message that are used on an external cell.
message TReqEndUpload
{
    optional TDataStatistics statistics = 1;

    // These fields should be safe to use after 25.3.
    reserved 6, 7, 14;

    optional int32 optimize_for = 8; // EOptimizeFor
    optional int32 compression_codec = 9; // NCompression::ECodec
    optional int32 erasure_codec = 10; // NErasure::ECodec
    optional NYT.NCrypto.NProto.TMD5Hasher md5_hasher = 11;
    optional int32 chunk_format = 13; // EChunkFormat

    message TSecurityTags
    {
        repeated string items = 1;
    }
    optional TSecurityTags security_tags = 12;
}

message TRspEndUpload
{ }

////////////////////////////////////////////////////////////////////////////////

// Returns info describing a given portion of table.
message TReqFetch
{
    optional bool fetch_all_meta_extensions = 2 [default = false];

    // Not yet supported.
    repeated int32 extension_tags = 3;

    reserved 5, 6, 7, 8, 9;

    optional bool fetch_parity_replicas = 10 [default = false];

    repeated TReadRange ranges = 11;

    optional int32 address_type = 12; // EAddressType

    optional bool omit_dynamic_stores = 13 [default = false];

    optional bool throw_on_chunk_views = 14 [default = false];

    // Bitmask of the chunk features that are supported by client.
    // If requested chunk uses features that are not supported by client,
    // an error is returned.
    optional uint64 supported_chunk_features = 15;

    optional int32 chunk_list_content_type = 16 [default = 0]; // EChunkListContentType [default = Main]
}

message TRspFetch
{
    required NYT.NNodeTrackerClient.NProto.TNodeDirectory node_directory = 1;
    repeated NChunkClient.NProto.TChunkSpec chunks = 2;
}

////////////////////////////////////////////////////////////////////////////////
