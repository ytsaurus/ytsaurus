package NYT.NScheduler.NProto;

import "yt/ytlib/controller_agent/proto/controller_agent_descriptor.proto";

import "yt_proto/yt/client/node_tracker_client/proto/node.proto";
import "yt_proto/yt/client/scheduler/proto/spec_patch.proto";

import "yt_proto/yt/core/misc/proto/error.proto";
import "yt_proto/yt/core/misc/proto/guid.proto";

////////////////////////////////////////////////////////////////////////////////

// Starts a new operation.

message TReqStartOperation
{
    // EOperationType value.
    required int32 type = 1;

    // Operation spec in YSON.
    required bytes spec = 2;

    // NB: Transaction id (if any) is passed via extension, like in Cypress commands.
}

message TRspStartOperation
{
    required NYT.NProto.TGuid operation_id = 1;
}

////////////////////////////////////////////////////////////////////////////////

// Aborts an existing operation.

message TReqAbortOperation
{
    oneof operation_id_or_alias {
        NYT.NProto.TGuid operation_id = 1;
        string operation_alias = 3;
    }
    optional string abort_message = 2;
}

message TRspAbortOperation
{ }

////////////////////////////////////////////////////////////////////////////////

// Puts an operation into suspended state.

message TReqSuspendOperation
{
    oneof operation_id_or_alias {
        NYT.NProto.TGuid operation_id = 1;
        string operation_alias = 3;
    }
    optional bool abort_running_jobs = 2;
    optional string reason = 4;
}

message TRspSuspendOperation
{ }

////////////////////////////////////////////////////////////////////////////////

// Resumes an earlier suspended operation.

message TReqResumeOperation
{
    oneof operation_id_or_alias {
        NYT.NProto.TGuid operation_id = 1;
        string operation_alias = 2;
    }
}

message TRspResumeOperation
{ }

////////////////////////////////////////////////////////////////////////////////

// Completes an existing operation.

message TReqCompleteOperation
{
    oneof operation_id_or_alias {
        NYT.NProto.TGuid operation_id = 1;
        string operation_alias = 2;
    }
}

message TRspCompleteOperation
{ }

////////////////////////////////////////////////////////////////////////////////

// Waits until a given operation is finished.

message TOperationResult
{
    required NYT.NProto.TError error = 1;
}

////////////////////////////////////////////////////////////////////////////////

// Updates operation runtime params.

message TReqUpdateOperationParameters
{
    oneof operation_id_or_alias {
        NYT.NProto.TGuid operation_id = 1;
        string operation_alias = 3;
    }
    // Operation parameters in YSON.
    required bytes parameters = 2;
}

message TRspUpdateOperationParameters
{ }

////////////////////////////////////////////////////////////////////////////////

// Changes operation spec at runtime.

message TReqPatchOperationSpec
{
    oneof operation_id_or_alias {
        NYT.NProto.TGuid operation_id = 1;
        string operation_alias = 2;
    }
    // Patch in YSON.
    repeated TSpecPatch patches = 3;
}

message TRspPatchOperationSpec
{ }

////////////////////////////////////////////////////////////////////////////////

// Get allocation brief info.

message TReqGetAllocationBriefInfo
{
    required NYT.NProto.TGuid allocation_id = 1;

    message TRequestedInfo
    {
        optional bool operation_id = 1 [default = false];
        optional bool operation_acl = 2 [default = false];
        optional bool operation_aco_name = 5 [default = false];
        optional bool controller_agent_descriptor = 3 [default = false];
        optional bool node_descriptor = 4 [default = false];
    }

    required TRequestedInfo requested_info = 2;
}

message TAllocationBriefInfo
{
    required NYT.NProto.TGuid allocation_id = 1;
    optional NYT.NProto.TGuid operation_id = 2;
    optional bytes operation_acl = 3;
    optional string operation_aco_name = 6;
    optional NControllerAgent.NProto.TControllerAgentDescriptor controller_agent_descriptor = 4;
    optional NNodeTrackerClient.NProto.TNodeDescriptor node_descriptor = 5;
}

message TRspGetAllocationBriefInfo
{
    required TAllocationBriefInfo allocation_brief_info = 1;
}

////////////////////////////////////////////////////////////////////////////////
