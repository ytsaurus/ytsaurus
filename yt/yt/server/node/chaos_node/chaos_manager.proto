package NYT.NChaosNode.NProto;

import "yt_proto/yt/client/chaos_client/proto/replication_card.proto";
import "yt_proto/yt/core/misc/proto/guid.proto";

////////////////////////////////////////////////////////////////////////////////

message TShortcut
{
    required NYT.NProto.TGuid replication_card_id = 1;
    required uint64 era = 2; // TReplicationEra
}

message TReqGrantShortcuts
{
    required NYT.NProto.TGuid chaos_cell_id = 1;
    repeated TShortcut shortcuts = 2;
}

message TRspGrantShortcuts
{
    required NYT.NProto.TGuid coordinator_cell_id = 1;
    required bool suspended = 2;
    repeated TShortcut shortcuts = 3;
}

message TReqRevokeShortcuts
{
    required NYT.NProto.TGuid chaos_cell_id = 1;
    repeated TShortcut shortcuts = 2;
}

message TRspRevokeShortcuts
{
    required NYT.NProto.TGuid coordinator_cell_id = 1;
    repeated TShortcut shortcuts = 2;
}

message TReqPropagateCurrentTimestamp
{
    required uint64 timestamp = 1; // NTransactionClient::TTimestamp
}

message TReqCommenceNewReplicationEra
{
    required NYT.NProto.TGuid replication_card_id = 1; // NChaosClient::TReplicationCardId
    required uint64 replication_era = 2; // NChaosClient::TReplicationEra
    required uint64 timestamp = 3; // NTransactionClient::TTimestamp
}

message TReqUpdateCoordinatorCells
{
    repeated NYT.NProto.TGuid add_coordinator_cell_ids = 1;
    repeated NYT.NProto.TGuid remove_coordinator_cell_ids = 2;
}

message TReqSuspendCoordinator
{
    required NYT.NProto.TGuid coordinator_cell_id = 1;
}

message TReqResumeCoordinator
{
    required NYT.NProto.TGuid coordinator_cell_id = 1;
}

message TExpiredReplicaHistory
{
    required NYT.NProto.TGuid replica_id = 1;
    required uint64 retain_timestamp = 2;
}

message TReqRemoveExpiredReplicaHistory
{
    repeated TExpiredReplicaHistory expired_replica_histories = 1;
}

message TReqMigrateReplicationCards
{
    message TMigrationCard
    {
        required NYT.NProto.TGuid origin_cell_id = 1;
        required NYT.NProto.TGuid replication_card_id = 2;
        required NYT.NChaosClient.NProto.TReplicationCard replication_card = 3;
        optional int32 replication_card_collocation_size = 4;
        optional string replication_card_collocation_options = 5;
    }

    required NYT.NProto.TGuid emigrated_from_cell_id = 1;
    repeated TMigrationCard migration_cards = 2;
    optional NYT.NProto.TGuid migration_token = 3;
}

message TReqConfirmReplicationCardMigration
{
    repeated NYT.NProto.TGuid replication_card_ids = 1;
    required NYT.NProto.TGuid migration_token = 2;
}

message TReqRemoveReplicationCard
{
    required NYT.NProto.TGuid replication_card_id = 1;
}

message TReqRemoveMigratedReplicationCards
{
    message TMigratedCard
    {
        required NYT.NProto.TGuid replication_card_id = 1;
        required uint64 migration_timestamp = 2;
    }

    repeated TMigratedCard migrated_cards = 1;
}

////////////////////////////////////////////////////////////////////////////////
