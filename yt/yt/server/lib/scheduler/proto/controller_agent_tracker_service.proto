package NYT.NScheduler.NProto;

import "yt_proto/yt/core/misc/proto/guid.proto";
import "yt_proto/yt/core/misc/proto/error.proto";
import "yt_proto/yt/client/node_tracker_client/proto/node.proto";
import "yt_proto/yt/core/tracing/proto/tracing_ext.proto";
import "yt/ytlib/scheduler/proto/resources.proto";
import "yt/ytlib/controller_agent/proto/controller_agent_service.proto";

////////////////////////////////////////////////////////////////////////////////

message TExecNodeDescriptor
{
    required uint32 node_id = 1;
    required string address = 2;
    required double io_weight = 3;
    required bool online = 6;
    required TJobResources resource_limits = 4;
    required NNodeTrackerClient.NProto.TDiskResources disk_resources = 7;
    repeated string tags = 5;
}

message TExecNodeDescriptorList
{
    repeated TExecNodeDescriptor exec_nodes = 1;
}

message TOperationAlert
{
    required int32 type = 1; // EOperationAlertType
    required NYT.NProto.TError error = 2;
}

message TOperationAlerts
{
    repeated TOperationAlert alerts = 1;
}

message TOperationInfo
{
    optional NYT.NProto.TGuid operation_id = 1;
    repeated NYT.NControllerAgent.NProto.TTreeTaggedJobMetrics job_metrics = 2;
    optional TOperationAlerts alerts = 3;
    optional bytes suspicious_jobs = 4;
    optional NYT.NControllerAgent.NProto.TCompositeNeededResources composite_needed_resources = 6;
    map<string, NYT.NControllerAgent.NProto.TAllocationGroupResources> grouped_needed_resources = 7;
}

message TAgentToSchedulerOperationEvent
{
    required NYT.NProto.TGuid operation_id = 1;
    required int32 event_type = 2; // EAgentToSchedulerOperationEventType
    required int32 controller_epoch = 11 [default = -1];

    // for Suspended, Aborted, Failed
    optional NYT.NProto.TError error = 3;

    // for BannedInTentativeTree
    optional string tentative_tree_id = 4;

    // for BannedInTentativeTree
    repeated NYT.NProto.TGuid tentative_tree_allocation_ids = 5;

    // for InitializationFinished
    optional NYT.NControllerAgent.NProto.TInitializeOperationResult initialize_result = 6;

    // for PreparationFinished
    optional NYT.NControllerAgent.NProto.TPrepareOperationResult prepare_result = 7;

    // for MaterializationFinished
    optional NYT.NControllerAgent.NProto.TMaterializeOperationResult materialize_result = 8;

    // for RevivalFinished
    optional NYT.NControllerAgent.NProto.TReviveOperationResult revive_result = 9;

    // for CommitFinished
    optional NYT.NControllerAgent.NProto.TCommitOperationResult commit_result = 10;
}

message TAgentToSchedulerRunningAllocationStatistics
{
    required NYT.NProto.TGuid allocation_id = 1;

    required uint64 preemptible_progress_start_time = 2;
}

message TSchedulerToAgentFinishedAllocationEvent
{
    required NYT.NProto.TGuid operation_id = 1;
    required NYT.NProto.TGuid allocation_id = 2;

    optional uint64 finish_time = 3;
}

message TSchedulerToAgentAbortedAllocationEvent
{
    required NYT.NProto.TGuid operation_id = 1;
    required NYT.NProto.TGuid allocation_id = 2;

    required NYT.NProto.TError error = 3;
    required int32 abort_reason = 6;

    required bool scheduled = 4;

    optional uint64 finish_time = 5;
}

message TSchedulerToAgentAllocationEvent
{
    oneof allocation_event {
        TSchedulerToAgentFinishedAllocationEvent finished = 1;
        TSchedulerToAgentAbortedAllocationEvent aborted = 2;
    }
}

message TSchedulerToAgentOperationEvent
{
    required NYT.NProto.TGuid operation_id = 1;
    required int32 event_type = 2; // ESchedulerToAgentOperationEventType
}

message TScheduleAllocationSpec
{
    optional int64 waiting_for_resources_on_node_timeout = 1;
}

message TScheduleAllocationRequest
{
    required NYT.NProto.TGuid operation_id = 1;
    required NYT.NProto.TGuid allocation_id = 2;
    required string tree_id = 3;
    required TJobResources allocation_resource_limits = 4;
    optional string pool_path = 8;
    required NNodeTrackerClient.NProto.TDiskResources node_disk_resources = 6;
    optional TScheduleAllocationSpec spec = 7;

    optional NYT.NTracing.NProto.TTracingExt tracing_ext = 9;
}

message TScheduleAllocationResponse
{
    message TFailedCounter
    {
        required int32 reason = 1; // EScheduleFailReason
        required int32 value = 2;
    }

    required NYT.NProto.TGuid allocation_id = 1;
    required bool success = 2;
    optional TJobResourcesWithQuota resource_limits = 3;
    optional TAllocationAttributes allocation_attributes = 10;
    repeated TFailedCounter failed = 4;
    required uint64 duration = 5;
    optional uint64 next_duration_estimate = 6;
    required NYT.NProto.TGuid operation_id = 7;
    required int32 controller_epoch = 8 [default = -1];

    optional NYT.NTracing.NProto.TTracingExt tracing_ext = 9;
}

message TEventQueueInbox
{
    required int64 next_expected_item_id = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqHandshake
{
    required string agent_id = 1;
    required NYT.NNodeTrackerClient.NProto.TAddressMap agent_addresses = 2;
    repeated string tags = 3;
}

message TRspHandshake
{
    required NYT.NProto.TGuid incarnation_id = 1;
    required bytes config = 2; // YSON
    optional string scheduler_version = 3;
}

////////////////////////////////////////////////////////////////////////////////

message TReqHeartbeat
{
    message TAgentToSchedulerOperationEventsOutbox
    {
        required int64 first_item_id = 1;
        repeated TAgentToSchedulerOperationEvent items = 2;
    }

    message TAgentToSchedulerRunningAllocationStatisticsUpdatesOutbox
    {
        required int64 first_item_id = 1;
        repeated TAgentToSchedulerRunningAllocationStatistics items = 2;
    }

    required string agent_id = 1;
    required NYT.NProto.TGuid incarnation_id = 2;
    repeated TOperationInfo operations = 3;

    required bool exec_nodes_requested = 4;

    required TAgentToSchedulerOperationEventsOutbox agent_to_scheduler_operation_events = 7;
    required TAgentToSchedulerRunningAllocationStatisticsUpdatesOutbox agent_to_scheduler_running_allocation_statistics_updates = 15;

    required TEventQueueInbox scheduler_to_agent_allocation_events = 10;
    required TEventQueueInbox scheduler_to_agent_operation_events = 11;
    required TEventQueueInbox scheduler_to_agent_schedule_allocation_requests = 12;

    optional int64 controller_memory_limit = 13;
    optional int64 controller_memory_usage = 14;
}

message TRspHeartbeat
{
    message TSchedulerToAgentAllocationEventsOutbox
    {
        required int64 first_item_id = 1;
        repeated TSchedulerToAgentAllocationEvent items = 2;
    }

    message TSchedulerToAgentOperationEventsOutbox
    {
        required int64 first_item_id = 1;
        repeated TSchedulerToAgentOperationEvent items = 2;
    }

    required TEventQueueInbox agent_to_scheduler_operation_events = 2;
    required TEventQueueInbox agent_to_scheduler_running_allocation_statistics_updates = 11;

    required TSchedulerToAgentAllocationEventsOutbox scheduler_to_agent_allocation_events = 4;
    required TSchedulerToAgentOperationEventsOutbox scheduler_to_agent_operation_events = 5;

    optional int32 operations_archive_version = 9;
}

////////////////////////////////////////////////////////////////////////////////

message TReqScheduleAllocationHeartbeat
{
    message TAgentToSchedulerScheduleAllocationResponsesOutbox
    {
        required int64 first_item_id = 1;
        repeated TScheduleAllocationResponse items = 2;
    }

    required string agent_id = 1;
    required NYT.NProto.TGuid incarnation_id = 2;
    required TAgentToSchedulerScheduleAllocationResponsesOutbox agent_to_scheduler_schedule_allocation_responses = 3;

    required TEventQueueInbox scheduler_to_agent_schedule_allocation_requests = 4;
}

message TRspScheduleAllocationHeartbeat
{
    message TSchedulerToAgentScheduleAllocationRequestsOutbox
    {
        required int64 first_item_id = 1;
        repeated TScheduleAllocationRequest items = 2;
    }

    required TEventQueueInbox agent_to_scheduler_schedule_allocation_responses = 1;

    required TSchedulerToAgentScheduleAllocationRequestsOutbox scheduler_to_agent_schedule_allocation_requests = 2;
}

////////////////////////////////////////////////////////////////////////////////
