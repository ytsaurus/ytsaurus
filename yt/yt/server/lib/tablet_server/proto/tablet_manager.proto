package NYT.NTabletServer.NProto;

import "yt/server/lib/tablet_node/proto/tablet_manager.proto";

import "yt/ytlib/tablet_client/proto/heartbeat.proto";

import "yt_proto/yt/client/chaos_client/proto/replication_card.proto";

import "yt_proto/yt/core/misc/proto/guid.proto";
import "yt_proto/yt/core/misc/proto/error.proto";

////////////////////////////////////////////////////////////////////////////////

message TTabletResources
{
    required int64 tablet_count = 1;
    required int64 tablet_static_memory = 2;
}

////////////////////////////////////////////////////////////////////////////////

message TReqOnTabletCellDecommisionedOnMaster
{
    required NYT.NProto.TGuid cell_id = 1;
}

message TReqDecommissionTabletCellOnMaster
{
    required NYT.NProto.TGuid cell_id = 1;
}

message TReqDecommissionTabletCellOnNode
{ }

message TRspDecommissionTabletCellOnNode
{
    required NYT.NProto.TGuid cell_id = 1;
}

message TReqSuspendTabletCell
{ }

message TReqResumeTabletCell
{ }

message TRspOnTabletCellSuspensionToggled
{
    required NYT.NProto.TGuid cell_id = 1;
    required bool suspended = 2;
}

message TReqSetTabletCellConfigVersion
{
    required NYT.NProto.TGuid cell_id = 1;
    required int32 config_version = 2;
}

message TRspMountTablet
{
    required NYT.NProto.TGuid tablet_id = 1;
    required bool frozen = 2;
    optional uint64 mount_revision = 3;
}

message TRspUnmountTablet
{
    required NYT.NProto.TGuid tablet_id = 1;
    optional NYT.NTabletNode.NProto.TMountHint mount_hint = 2;
    optional NYT.NChaosClient.NProto.TReplicationProgress replication_progress = 3;
    optional uint64 mount_revision = 4;
}

message TRspFreezeTablet
{
    required NYT.NProto.TGuid tablet_id = 1;
    optional NYT.NTabletNode.NProto.TMountHint mount_hint = 2;
    optional uint64 mount_revision = 3;
}

message TRspUnfreezeTablet
{
    required NYT.NProto.TGuid tablet_id = 1;
    optional uint64 mount_revision = 2;
}

message TRspCancelTabletTransition
{
    required NYT.NProto.TGuid tablet_id = 1;
    required int32 actual_tablet_state = 2; // ETabletState;
    required uint64 mount_revision = 3;
}

message TRspLockTablet
{
    required NYT.NProto.TGuid tablet_id = 1;
    repeated NYT.NProto.TGuid transaction_ids = 2;
}

message TReqUpdateTabletStores
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 mount_revision = 4;
    repeated NTabletNode.NProto.TAddStoreDescriptor stores_to_add = 2;
    repeated NTabletNode.NProto.TRemoveStoreDescriptor stores_to_remove = 3;
    repeated NTabletNode.NProto.TAddHunkChunkDescriptor hunk_chunks_to_add = 8;
    repeated NTabletNode.NProto.TRemoveHunkChunkDescriptor hunk_chunks_to_remove = 9;
    required uint64 retained_timestamp = 5;
    optional int32 update_reason = 6 [default = 0]; // ETabletStoresUpdateReason
    optional bool request_dynamic_store_id = 7 [default = false];
    // COMPAT(aleksandra-zh)
    optional bool create_hunk_chunks_during_prepare = 10 [default = false];
}

message TReqUpdateTabletTrimmedRowCount
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 mount_revision = 2;
    required int64 trimmed_row_count = 3;
}

message TReqMaterializeExtraMountConfigKeys
{
    repeated string table_mount_config_keys = 1;
}

message TReqUpdateTableReplicaStatistics
{
    required NYT.NProto.TGuid tablet_id = 1;
    required NYT.NProto.TGuid replica_id = 2;
    required uint64 mount_revision = 3;
    required NTabletClient.NProto.TTableReplicaStatistics statistics = 4;
}

message TRspEnableTableReplica
{
    required NYT.NProto.TGuid tablet_id = 1;
    required NYT.NProto.TGuid replica_id = 2;
    required uint64 mount_revision = 3;
}

message TRspDisableTableReplica
{
    required NYT.NProto.TGuid tablet_id = 1;
    required NYT.NProto.TGuid replica_id = 2;
    required uint64 mount_revision = 3;
}

message TReqCreateTabletAction
{
    required int32 kind = 1;
    repeated NYT.NProto.TGuid tablet_ids = 2;
    repeated NYT.NProto.TGuid cell_ids = 3;
    repeated bytes pivot_keys = 4;
    optional int32 tablet_count = 5;
    optional NYT.NProto.TGuid correlation_id = 7;
    optional uint64 expiration_time = 8;
    optional uint64 expiration_timeout = 9;
}

message TReqDestroyTabletActions
{
    repeated NYT.NProto.TGuid tablet_action_ids = 1;
}

message TReqKickOrphanedTabletActions
{
    repeated NYT.NProto.TGuid tablet_action_ids = 1;
}

message TTabletCellStatistics
{
    message TTabletCountPerMemoryModeEntry
    {
        required int32 key = 1; // EInMemoryMode
        required int32 value = 2;  // TabletCount
    }

    required int64 unmerged_row_count = 1;
    required int64 uncompressed_data_size = 2;
    required int64 compressed_data_size = 3;
    optional int64 hunk_uncompressed_data_size = 18;
    optional int64 hunk_compressed_data_size = 19;
    required int64 memory_size = 4;
    required int64 dynamic_memory_pool_size = 5;
    required int32 chunk_count = 7;
    required int32 partition_count = 8;
    required int32 store_count = 9;
    required int32 preload_pending_store_count = 10;
    required int32 preload_completed_store_count = 11;
    required int32 preload_failed_store_count = 12;
    required int32 tablet_count = 13;
    repeated TTabletCountPerMemoryModeEntry tablet_count_per_memory_mode = 14;

    message TMediumDiskSpace
    {
        required int32 medium_index = 1;
        required int64 disk_space = 2;
    }

    repeated TMediumDiskSpace disk_space_per_medium = 17;

    reserved 6, 15, 16;
}

message TReqUpdateTabletCellHealthStatistics
{ }

message TReqSetTabletCellStatistics
{
    message TEntry
    {
        required NYT.NProto.TGuid tablet_cell_id = 1;
        required TTabletCellStatistics statistics = 2;
    }

    required uint32 cell_tag = 1;
    repeated TEntry entries = 2;
}

message TReqUpdateUpstreamTabletState
{
    required NYT.NProto.TGuid table_id = 1;
    required NYT.NProto.TGuid last_mount_transaction_id = 2;
    optional int32 actual_tablet_state = 3;
    optional int32 expected_tablet_state = 4;
}

message TReqUpdateTabletState
{
    required NYT.NProto.TGuid table_id = 1;
    required NYT.NProto.TGuid last_mount_transaction_id = 2;
}

message TReqStartPrerequisiteTransaction
{
    required NYT.NProto.TGuid cell_id = 1;
    required NYT.NProto.TGuid transaction_id = 2;
    optional int32 peer_id = 3;
}

message TReqAbortPrerequisiteTransaction
{
    required NYT.NProto.TGuid cell_id = 1;
    required NYT.NProto.TGuid transaction_id = 2;
    optional int32 peer_id = 3;
}

message TReqAllocateDynamicStore
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 mount_revision = 2;
}

message TReqSetTabletCellBundleResourceUsage
{
    message TEntry
    {
        required NYT.NProto.TGuid bundle_id = 1;
        required TTabletResources resource_usage = 2;
    }

    required uint32 cell_tag = 1;
    repeated TEntry entries = 2;
}

message TReqUpdateTabletCellBundleResourceUsage
{ }

message TRspMountHunkTablet
{
    required NYT.NProto.TGuid tablet_id = 1;
    optional uint64 mount_revision = 2;
}

message TRspUnmountHunkTablet
{
    required NYT.NProto.TGuid tablet_id = 1;
    optional uint64 mount_revision = 2;
}

message TReqUpdateHunkTabletStores
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 mount_revision = 2;
    repeated NTabletNode.NProto.TAddHunkStoreDescriptor stores_to_add = 3;
    repeated NTabletNode.NProto.TRemoveHunkStoreDescriptor stores_to_remove = 4;
    repeated NTabletNode.NProto.TMarkHunkStoreSealableDescriptor stores_to_mark_sealable = 5;
}

message TReqSwitchServant
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 source_mount_revision = 2;
    required uint64 target_mount_revision = 3;
}

message TReqDeallocateServant
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 auxiliary_mount_revision = 2;
}

message TReqReportSmoothMovementProgress
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 mount_revision = 2;
    required int32 stage = 3; // ESmoothMovementStage
}

message TReqReportSmoothMovementAborted
{
    required NYT.NProto.TGuid tablet_id = 1;
    optional NYT.NProto.TError error = 2;
}

message TReqOnCellsHydraPersistenceSynchronized
{
    message TAclsUpdateInfo
    {
        required NYT.NProto.TGuid cell_id = 1;
        required int32 config_version = 2;
    }

    repeated NYT.NProto.TGuid cypress_registered_ids = 1;
    repeated TAclsUpdateInfo acls_update_info = 2;
}

////////////////////////////////////////////////////////////////////////////////
