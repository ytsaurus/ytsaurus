package NYT.NFlow.NController.NProto;

import "yt_proto/yt/core/yson/proto/protobuf_interop.proto";

////////////////////////////////////////////////////////////////////////////////

message TReqGetFlowView
{
    optional bytes path = 1 [default = ""];
    optional bool cache = 2 [default = true];
}

message TRspGetFlowView
{
    required bytes flow_view_part = 1 [(NYT.NYson.NProto.yson_string) = true];
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetSpec
{
}

message TRspGetSpec
{
    required int64 version = 1;
    required bytes spec = 2 [(NYT.NYson.NProto.yson_string) = true];
}

////////////////////////////////////////////////////////////////////////////////

message TReqSetSpec
{
    optional string path = 1;
    optional int64 expected_version = 2;
    required bytes spec = 3 [(NYT.NYson.NProto.yson_string) = true];
    // Update spec even if pipeline is not stopped, just paused.
    optional bool force = 4;
}

message TRspSetSpec
{
    required int64 version = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetDynamicSpec
{
}

message TRspGetDynamicSpec
{
    required int64 version = 1;
    required bytes spec = 2 [(NYT.NYson.NProto.yson_string) = true];
}

////////////////////////////////////////////////////////////////////////////////

message TReqSetDynamicSpec
{
    optional string path = 1;
    optional int64 expected_version = 2;
    optional bytes spec = 3 [(NYT.NYson.NProto.yson_string) = true];
}

message TRspSetDynamicSpec
{
    required int64 version = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetPipelineState
{
}

message TRspGetPipelineState
{
    required int32 state = 1; // EPipelineState
}

////////////////////////////////////////////////////////////////////////////////

message TReqStartPipeline
{
}

message TRspStartPipeline
{
}

////////////////////////////////////////////////////////////////////////////////

message TReqPausePipeline
{
}

message TRspPausePipeline
{
}

////////////////////////////////////////////////////////////////////////////////

message TReqStopPipeline
{
}

message TRspStopPipeline
{
}

////////////////////////////////////////////////////////////////////////////////
