// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.22.5
// source: yt/yt_proto/yt/client/node_tracker_client/proto/node.proto

package node_tracker_client

import (
	misc "go.ytsaurus.tech/yt/go/proto/core/misc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TODO(gritukan): Move it to TReqFullChunkHeartbeat after switching to new heartbeats.
type TMediumChunkStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediumIndex *int32 `protobuf:"varint,1,req,name=medium_index,json=mediumIndex" json:"medium_index,omitempty"`
	ChunkCount  *int32 `protobuf:"varint,2,req,name=chunk_count,json=chunkCount" json:"chunk_count,omitempty"`
}

func (x *TMediumChunkStatistics) Reset() {
	*x = TMediumChunkStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMediumChunkStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMediumChunkStatistics) ProtoMessage() {}

func (x *TMediumChunkStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMediumChunkStatistics.ProtoReflect.Descriptor instead.
func (*TMediumChunkStatistics) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{0}
}

func (x *TMediumChunkStatistics) GetMediumIndex() int32 {
	if x != nil && x.MediumIndex != nil {
		return *x.MediumIndex
	}
	return 0
}

func (x *TMediumChunkStatistics) GetChunkCount() int32 {
	if x != nil && x.ChunkCount != nil {
		return *x.ChunkCount
	}
	return 0
}

type TIOStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilesystemReadRate  *int64 `protobuf:"varint,1,opt,name=filesystem_read_rate,json=filesystemReadRate" json:"filesystem_read_rate,omitempty"`
	FilesystemWriteRate *int64 `protobuf:"varint,2,opt,name=filesystem_write_rate,json=filesystemWriteRate" json:"filesystem_write_rate,omitempty"`
	DiskReadRate        *int64 `protobuf:"varint,3,opt,name=disk_read_rate,json=diskReadRate" json:"disk_read_rate,omitempty"`
	DiskWriteRate       *int64 `protobuf:"varint,4,opt,name=disk_write_rate,json=diskWriteRate" json:"disk_write_rate,omitempty"`
	DiskReadCapacity    *int64 `protobuf:"varint,5,opt,name=disk_read_capacity,json=diskReadCapacity" json:"disk_read_capacity,omitempty"`
	DiskWriteCapacity   *int64 `protobuf:"varint,6,opt,name=disk_write_capacity,json=diskWriteCapacity" json:"disk_write_capacity,omitempty"`
}

func (x *TIOStatistics) Reset() {
	*x = TIOStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TIOStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TIOStatistics) ProtoMessage() {}

func (x *TIOStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TIOStatistics.ProtoReflect.Descriptor instead.
func (*TIOStatistics) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{1}
}

func (x *TIOStatistics) GetFilesystemReadRate() int64 {
	if x != nil && x.FilesystemReadRate != nil {
		return *x.FilesystemReadRate
	}
	return 0
}

func (x *TIOStatistics) GetFilesystemWriteRate() int64 {
	if x != nil && x.FilesystemWriteRate != nil {
		return *x.FilesystemWriteRate
	}
	return 0
}

func (x *TIOStatistics) GetDiskReadRate() int64 {
	if x != nil && x.DiskReadRate != nil {
		return *x.DiskReadRate
	}
	return 0
}

func (x *TIOStatistics) GetDiskWriteRate() int64 {
	if x != nil && x.DiskWriteRate != nil {
		return *x.DiskWriteRate
	}
	return 0
}

func (x *TIOStatistics) GetDiskReadCapacity() int64 {
	if x != nil && x.DiskReadCapacity != nil {
		return *x.DiskReadCapacity
	}
	return 0
}

func (x *TIOStatistics) GetDiskWriteCapacity() int64 {
	if x != nil && x.DiskWriteCapacity != nil {
		return *x.DiskWriteCapacity
	}
	return 0
}

// Describes the current state of a chunk location.
type TChunkLocationStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocationUuid      *misc.TGuid    `protobuf:"bytes,12,opt,name=location_uuid,json=locationUuid" json:"location_uuid,omitempty"`
	DiskFamily        *string        `protobuf:"bytes,13,opt,name=disk_family,json=diskFamily,def=UNKNOWN" json:"disk_family,omitempty"`
	MediumIndex       *int32         `protobuf:"varint,7,req,name=medium_index,json=mediumIndex" json:"medium_index,omitempty"`
	AvailableSpace    *int64         `protobuf:"varint,1,req,name=available_space,json=availableSpace" json:"available_space,omitempty"`
	UsedSpace         *int64         `protobuf:"varint,2,req,name=used_space,json=usedSpace" json:"used_space,omitempty"`
	LowWatermarkSpace *int64         `protobuf:"varint,8,req,name=low_watermark_space,json=lowWatermarkSpace" json:"low_watermark_space,omitempty"`
	ChunkCount        *int32         `protobuf:"varint,3,req,name=chunk_count,json=chunkCount" json:"chunk_count,omitempty"`
	SessionCount      *int32         `protobuf:"varint,4,req,name=session_count,json=sessionCount" json:"session_count,omitempty"`
	Enabled           *bool          `protobuf:"varint,5,req,name=enabled" json:"enabled,omitempty"`
	Full              *bool          `protobuf:"varint,6,req,name=full" json:"full,omitempty"`
	ThrottlingReads   *bool          `protobuf:"varint,9,opt,name=throttling_reads,json=throttlingReads,def=0" json:"throttling_reads,omitempty"`
	ThrottlingWrites  *bool          `protobuf:"varint,10,opt,name=throttling_writes,json=throttlingWrites,def=0" json:"throttling_writes,omitempty"`
	Sick              *bool          `protobuf:"varint,11,opt,name=sick,def=0" json:"sick,omitempty"`
	IoStatistics      *TIOStatistics `protobuf:"bytes,14,opt,name=io_statistics,json=ioStatistics" json:"io_statistics,omitempty"`
}

// Default values for TChunkLocationStatistics fields.
const (
	Default_TChunkLocationStatistics_DiskFamily       = string("UNKNOWN")
	Default_TChunkLocationStatistics_ThrottlingReads  = bool(false)
	Default_TChunkLocationStatistics_ThrottlingWrites = bool(false)
	Default_TChunkLocationStatistics_Sick             = bool(false)
)

func (x *TChunkLocationStatistics) Reset() {
	*x = TChunkLocationStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TChunkLocationStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TChunkLocationStatistics) ProtoMessage() {}

func (x *TChunkLocationStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TChunkLocationStatistics.ProtoReflect.Descriptor instead.
func (*TChunkLocationStatistics) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{2}
}

func (x *TChunkLocationStatistics) GetLocationUuid() *misc.TGuid {
	if x != nil {
		return x.LocationUuid
	}
	return nil
}

func (x *TChunkLocationStatistics) GetDiskFamily() string {
	if x != nil && x.DiskFamily != nil {
		return *x.DiskFamily
	}
	return Default_TChunkLocationStatistics_DiskFamily
}

func (x *TChunkLocationStatistics) GetMediumIndex() int32 {
	if x != nil && x.MediumIndex != nil {
		return *x.MediumIndex
	}
	return 0
}

func (x *TChunkLocationStatistics) GetAvailableSpace() int64 {
	if x != nil && x.AvailableSpace != nil {
		return *x.AvailableSpace
	}
	return 0
}

func (x *TChunkLocationStatistics) GetUsedSpace() int64 {
	if x != nil && x.UsedSpace != nil {
		return *x.UsedSpace
	}
	return 0
}

func (x *TChunkLocationStatistics) GetLowWatermarkSpace() int64 {
	if x != nil && x.LowWatermarkSpace != nil {
		return *x.LowWatermarkSpace
	}
	return 0
}

func (x *TChunkLocationStatistics) GetChunkCount() int32 {
	if x != nil && x.ChunkCount != nil {
		return *x.ChunkCount
	}
	return 0
}

func (x *TChunkLocationStatistics) GetSessionCount() int32 {
	if x != nil && x.SessionCount != nil {
		return *x.SessionCount
	}
	return 0
}

func (x *TChunkLocationStatistics) GetEnabled() bool {
	if x != nil && x.Enabled != nil {
		return *x.Enabled
	}
	return false
}

func (x *TChunkLocationStatistics) GetFull() bool {
	if x != nil && x.Full != nil {
		return *x.Full
	}
	return false
}

func (x *TChunkLocationStatistics) GetThrottlingReads() bool {
	if x != nil && x.ThrottlingReads != nil {
		return *x.ThrottlingReads
	}
	return Default_TChunkLocationStatistics_ThrottlingReads
}

func (x *TChunkLocationStatistics) GetThrottlingWrites() bool {
	if x != nil && x.ThrottlingWrites != nil {
		return *x.ThrottlingWrites
	}
	return Default_TChunkLocationStatistics_ThrottlingWrites
}

func (x *TChunkLocationStatistics) GetSick() bool {
	if x != nil && x.Sick != nil {
		return *x.Sick
	}
	return Default_TChunkLocationStatistics_Sick
}

func (x *TChunkLocationStatistics) GetIoStatistics() *TIOStatistics {
	if x != nil {
		return x.IoStatistics
	}
	return nil
}

// Describes the current state of a slot location.
type TSlotLocationStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediumIndex     *int32  `protobuf:"varint,1,req,name=medium_index,json=mediumIndex" json:"medium_index,omitempty"`
	AvailableSpace  *int64  `protobuf:"varint,2,opt,name=available_space,json=availableSpace" json:"available_space,omitempty"`
	UsedSpace       *int64  `protobuf:"varint,3,opt,name=used_space,json=usedSpace" json:"used_space,omitempty"`
	SlotSpaceUsages []int64 `protobuf:"varint,4,rep,name=slot_space_usages,json=slotSpaceUsages" json:"slot_space_usages,omitempty"`
	// ! If slot location is disabled, this error contains the reason.
	Error *misc.TError `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
}

func (x *TSlotLocationStatistics) Reset() {
	*x = TSlotLocationStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSlotLocationStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSlotLocationStatistics) ProtoMessage() {}

func (x *TSlotLocationStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSlotLocationStatistics.ProtoReflect.Descriptor instead.
func (*TSlotLocationStatistics) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{3}
}

func (x *TSlotLocationStatistics) GetMediumIndex() int32 {
	if x != nil && x.MediumIndex != nil {
		return *x.MediumIndex
	}
	return 0
}

func (x *TSlotLocationStatistics) GetAvailableSpace() int64 {
	if x != nil && x.AvailableSpace != nil {
		return *x.AvailableSpace
	}
	return 0
}

func (x *TSlotLocationStatistics) GetUsedSpace() int64 {
	if x != nil && x.UsedSpace != nil {
		return *x.UsedSpace
	}
	return 0
}

func (x *TSlotLocationStatistics) GetSlotSpaceUsages() []int64 {
	if x != nil {
		return x.SlotSpaceUsages
	}
	return nil
}

func (x *TSlotLocationStatistics) GetError() *misc.TError {
	if x != nil {
		return x.Error
	}
	return nil
}

// Provides detailed information on memory consumption.
type TMemoryStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalLimit *int64                         `protobuf:"varint,1,req,name=total_limit,json=totalLimit" json:"total_limit,omitempty"`
	TotalUsed  *int64                         `protobuf:"varint,2,req,name=total_used,json=totalUsed" json:"total_used,omitempty"`
	Categories []*TMemoryStatistics_TCategory `protobuf:"bytes,3,rep,name=categories" json:"categories,omitempty"`
}

func (x *TMemoryStatistics) Reset() {
	*x = TMemoryStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMemoryStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMemoryStatistics) ProtoMessage() {}

func (x *TMemoryStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMemoryStatistics.ProtoReflect.Descriptor instead.
func (*TMemoryStatistics) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{4}
}

func (x *TMemoryStatistics) GetTotalLimit() int64 {
	if x != nil && x.TotalLimit != nil {
		return *x.TotalLimit
	}
	return 0
}

func (x *TMemoryStatistics) GetTotalUsed() int64 {
	if x != nil && x.TotalUsed != nil {
		return *x.TotalUsed
	}
	return 0
}

func (x *TMemoryStatistics) GetCategories() []*TMemoryStatistics_TCategory {
	if x != nil {
		return x.Categories
	}
	return nil
}

// Provides detailed information on cpu distribution.
type TCpuStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalUsed      *float64 `protobuf:"fixed64,1,req,name=total_used,json=totalUsed" json:"total_used,omitempty"`
	TotalLimit     *float64 `protobuf:"fixed64,2,opt,name=total_limit,json=totalLimit" json:"total_limit,omitempty"`
	TotalGuarantee *float64 `protobuf:"fixed64,6,opt,name=total_guarantee,json=totalGuarantee" json:"total_guarantee,omitempty"`
	TabletSlots    *float64 `protobuf:"fixed64,3,req,name=tablet_slots,json=tabletSlots" json:"tablet_slots,omitempty"`
	Dedicated      *float64 `protobuf:"fixed64,4,req,name=dedicated" json:"dedicated,omitempty"`
	Jobs           *float64 `protobuf:"fixed64,5,req,name=jobs" json:"jobs,omitempty"`
}

func (x *TCpuStatistics) Reset() {
	*x = TCpuStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCpuStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCpuStatistics) ProtoMessage() {}

func (x *TCpuStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCpuStatistics.ProtoReflect.Descriptor instead.
func (*TCpuStatistics) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{5}
}

func (x *TCpuStatistics) GetTotalUsed() float64 {
	if x != nil && x.TotalUsed != nil {
		return *x.TotalUsed
	}
	return 0
}

func (x *TCpuStatistics) GetTotalLimit() float64 {
	if x != nil && x.TotalLimit != nil {
		return *x.TotalLimit
	}
	return 0
}

func (x *TCpuStatistics) GetTotalGuarantee() float64 {
	if x != nil && x.TotalGuarantee != nil {
		return *x.TotalGuarantee
	}
	return 0
}

func (x *TCpuStatistics) GetTabletSlots() float64 {
	if x != nil && x.TabletSlots != nil {
		return *x.TabletSlots
	}
	return 0
}

func (x *TCpuStatistics) GetDedicated() float64 {
	if x != nil && x.Dedicated != nil {
		return *x.Dedicated
	}
	return 0
}

func (x *TCpuStatistics) GetJobs() float64 {
	if x != nil && x.Jobs != nil {
		return *x.Jobs
	}
	return 0
}

// Describes the current state of a storage medium.
type TMediumStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediumIndex *int32   `protobuf:"varint,1,req,name=medium_index,json=mediumIndex" json:"medium_index,omitempty"`
	IoWeight    *float64 `protobuf:"fixed64,3,req,name=io_weight,json=ioWeight" json:"io_weight,omitempty"`
}

func (x *TMediumStatistics) Reset() {
	*x = TMediumStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMediumStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMediumStatistics) ProtoMessage() {}

func (x *TMediumStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMediumStatistics.ProtoReflect.Descriptor instead.
func (*TMediumStatistics) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{6}
}

func (x *TMediumStatistics) GetMediumIndex() int32 {
	if x != nil && x.MediumIndex != nil {
		return *x.MediumIndex
	}
	return 0
}

func (x *TMediumStatistics) GetIoWeight() float64 {
	if x != nil && x.IoWeight != nil {
		return *x.IoWeight
	}
	return 0
}

type TNetworkStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network         *string `protobuf:"bytes,1,req,name=network" json:"network,omitempty"`
	ThrottlingReads *bool   `protobuf:"varint,2,req,name=throttling_reads,json=throttlingReads,def=0" json:"throttling_reads,omitempty"`
}

// Default values for TNetworkStatistics fields.
const (
	Default_TNetworkStatistics_ThrottlingReads = bool(false)
)

func (x *TNetworkStatistics) Reset() {
	*x = TNetworkStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TNetworkStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TNetworkStatistics) ProtoMessage() {}

func (x *TNetworkStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TNetworkStatistics.ProtoReflect.Descriptor instead.
func (*TNetworkStatistics) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{7}
}

func (x *TNetworkStatistics) GetNetwork() string {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return ""
}

func (x *TNetworkStatistics) GetThrottlingReads() bool {
	if x != nil && x.ThrottlingReads != nil {
		return *x.ThrottlingReads
	}
	return Default_TNetworkStatistics_ThrottlingReads
}

// Describes the current state of the whole node.
type TNodeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalAvailableSpace          *int64                      `protobuf:"varint,1,req,name=total_available_space,json=totalAvailableSpace" json:"total_available_space,omitempty"`
	TotalUsedSpace               *int64                      `protobuf:"varint,2,req,name=total_used_space,json=totalUsedSpace" json:"total_used_space,omitempty"`
	TotalStoredChunkCount        *int32                      `protobuf:"varint,3,req,name=total_stored_chunk_count,json=totalStoredChunkCount" json:"total_stored_chunk_count,omitempty"`
	TotalCachedChunkCount        *int32                      `protobuf:"varint,16,req,name=total_cached_chunk_count,json=totalCachedChunkCount" json:"total_cached_chunk_count,omitempty"`
	TotalUserSessionCount        *int32                      `protobuf:"varint,4,req,name=total_user_session_count,json=totalUserSessionCount" json:"total_user_session_count,omitempty"`
	TotalReplicationSessionCount *int32                      `protobuf:"varint,7,req,name=total_replication_session_count,json=totalReplicationSessionCount" json:"total_replication_session_count,omitempty"`
	TotalRepairSessionCount      *int32                      `protobuf:"varint,8,req,name=total_repair_session_count,json=totalRepairSessionCount" json:"total_repair_session_count,omitempty"`
	TotalLowWatermarkSpace       *int64                      `protobuf:"varint,14,req,name=total_low_watermark_space,json=totalLowWatermarkSpace" json:"total_low_watermark_space,omitempty"`
	Full                         *bool                       `protobuf:"varint,5,req,name=full" json:"full,omitempty"`
	ChunkLocations               []*TChunkLocationStatistics `protobuf:"bytes,6,rep,name=chunk_locations,json=chunkLocations" json:"chunk_locations,omitempty"`
	AvailableTabletSlots         *int32                      `protobuf:"varint,11,req,name=available_tablet_slots,json=availableTabletSlots" json:"available_tablet_slots,omitempty"`
	UsedTabletSlots              *int32                      `protobuf:"varint,12,req,name=used_tablet_slots,json=usedTabletSlots" json:"used_tablet_slots,omitempty"`
	Memory                       *TMemoryStatistics          `protobuf:"bytes,15,req,name=memory" json:"memory,omitempty"`
	Media                        []*TMediumStatistics        `protobuf:"bytes,17,rep,name=media" json:"media,omitempty"`
	Network                      []*TNetworkStatistics       `protobuf:"bytes,18,rep,name=network" json:"network,omitempty"`
	SlotLocations                []*TSlotLocationStatistics  `protobuf:"bytes,19,rep,name=slot_locations,json=slotLocations" json:"slot_locations,omitempty"`
	Cpu                          *TCpuStatistics             `protobuf:"bytes,20,opt,name=cpu" json:"cpu,omitempty"`
}

func (x *TNodeStatistics) Reset() {
	*x = TNodeStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TNodeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TNodeStatistics) ProtoMessage() {}

func (x *TNodeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TNodeStatistics.ProtoReflect.Descriptor instead.
func (*TNodeStatistics) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{8}
}

func (x *TNodeStatistics) GetTotalAvailableSpace() int64 {
	if x != nil && x.TotalAvailableSpace != nil {
		return *x.TotalAvailableSpace
	}
	return 0
}

func (x *TNodeStatistics) GetTotalUsedSpace() int64 {
	if x != nil && x.TotalUsedSpace != nil {
		return *x.TotalUsedSpace
	}
	return 0
}

func (x *TNodeStatistics) GetTotalStoredChunkCount() int32 {
	if x != nil && x.TotalStoredChunkCount != nil {
		return *x.TotalStoredChunkCount
	}
	return 0
}

func (x *TNodeStatistics) GetTotalCachedChunkCount() int32 {
	if x != nil && x.TotalCachedChunkCount != nil {
		return *x.TotalCachedChunkCount
	}
	return 0
}

func (x *TNodeStatistics) GetTotalUserSessionCount() int32 {
	if x != nil && x.TotalUserSessionCount != nil {
		return *x.TotalUserSessionCount
	}
	return 0
}

func (x *TNodeStatistics) GetTotalReplicationSessionCount() int32 {
	if x != nil && x.TotalReplicationSessionCount != nil {
		return *x.TotalReplicationSessionCount
	}
	return 0
}

func (x *TNodeStatistics) GetTotalRepairSessionCount() int32 {
	if x != nil && x.TotalRepairSessionCount != nil {
		return *x.TotalRepairSessionCount
	}
	return 0
}

func (x *TNodeStatistics) GetTotalLowWatermarkSpace() int64 {
	if x != nil && x.TotalLowWatermarkSpace != nil {
		return *x.TotalLowWatermarkSpace
	}
	return 0
}

func (x *TNodeStatistics) GetFull() bool {
	if x != nil && x.Full != nil {
		return *x.Full
	}
	return false
}

func (x *TNodeStatistics) GetChunkLocations() []*TChunkLocationStatistics {
	if x != nil {
		return x.ChunkLocations
	}
	return nil
}

func (x *TNodeStatistics) GetAvailableTabletSlots() int32 {
	if x != nil && x.AvailableTabletSlots != nil {
		return *x.AvailableTabletSlots
	}
	return 0
}

func (x *TNodeStatistics) GetUsedTabletSlots() int32 {
	if x != nil && x.UsedTabletSlots != nil {
		return *x.UsedTabletSlots
	}
	return 0
}

func (x *TNodeStatistics) GetMemory() *TMemoryStatistics {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *TNodeStatistics) GetMedia() []*TMediumStatistics {
	if x != nil {
		return x.Media
	}
	return nil
}

func (x *TNodeStatistics) GetNetwork() []*TNetworkStatistics {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *TNodeStatistics) GetSlotLocations() []*TSlotLocationStatistics {
	if x != nil {
		return x.SlotLocations
	}
	return nil
}

func (x *TNodeStatistics) GetCpu() *TCpuStatistics {
	if x != nil {
		return x.Cpu
	}
	return nil
}

// Measures limits and utilization of various resources.
type TNodeResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserSlots           *int32   `protobuf:"varint,1,opt,name=user_slots,json=userSlots" json:"user_slots,omitempty"`
	Cpu                 *float64 `protobuf:"fixed64,2,opt,name=cpu" json:"cpu,omitempty"`
	UserMemory          *int64   `protobuf:"varint,3,opt,name=user_memory,json=userMemory" json:"user_memory,omitempty"`
	Network             *int32   `protobuf:"varint,4,opt,name=network" json:"network,omitempty"`
	ReplicationSlots    *int32   `protobuf:"varint,5,opt,name=replication_slots,json=replicationSlots" json:"replication_slots,omitempty"`
	RemovalSlots        *int32   `protobuf:"varint,6,opt,name=removal_slots,json=removalSlots" json:"removal_slots,omitempty"`
	RepairSlots         *int32   `protobuf:"varint,7,opt,name=repair_slots,json=repairSlots" json:"repair_slots,omitempty"`
	SealSlots           *int32   `protobuf:"varint,8,opt,name=seal_slots,json=sealSlots" json:"seal_slots,omitempty"`
	MergeSlots          *int32   `protobuf:"varint,13,opt,name=merge_slots,json=mergeSlots" json:"merge_slots,omitempty"`
	AutotomySlots       *int32   `protobuf:"varint,15,opt,name=autotomy_slots,json=autotomySlots" json:"autotomy_slots,omitempty"`
	ReincarnationSlots  *int32   `protobuf:"varint,17,opt,name=reincarnation_slots,json=reincarnationSlots" json:"reincarnation_slots,omitempty"`
	ReplicationDataSize *int64   `protobuf:"varint,9,opt,name=replication_data_size,json=replicationDataSize" json:"replication_data_size,omitempty"`
	RepairDataSize      *int64   `protobuf:"varint,10,opt,name=repair_data_size,json=repairDataSize" json:"repair_data_size,omitempty"`
	MergeDataSize       *int64   `protobuf:"varint,14,opt,name=merge_data_size,json=mergeDataSize" json:"merge_data_size,omitempty"`
	SystemMemory        *int64   `protobuf:"varint,11,opt,name=system_memory,json=systemMemory" json:"system_memory,omitempty"`
	Gpu                 *int32   `protobuf:"varint,12,opt,name=gpu" json:"gpu,omitempty"`
	Vcpu                *float64 `protobuf:"fixed64,16,opt,name=vcpu" json:"vcpu,omitempty"`
}

func (x *TNodeResources) Reset() {
	*x = TNodeResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TNodeResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TNodeResources) ProtoMessage() {}

func (x *TNodeResources) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TNodeResources.ProtoReflect.Descriptor instead.
func (*TNodeResources) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{9}
}

func (x *TNodeResources) GetUserSlots() int32 {
	if x != nil && x.UserSlots != nil {
		return *x.UserSlots
	}
	return 0
}

func (x *TNodeResources) GetCpu() float64 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *TNodeResources) GetUserMemory() int64 {
	if x != nil && x.UserMemory != nil {
		return *x.UserMemory
	}
	return 0
}

func (x *TNodeResources) GetNetwork() int32 {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return 0
}

func (x *TNodeResources) GetReplicationSlots() int32 {
	if x != nil && x.ReplicationSlots != nil {
		return *x.ReplicationSlots
	}
	return 0
}

func (x *TNodeResources) GetRemovalSlots() int32 {
	if x != nil && x.RemovalSlots != nil {
		return *x.RemovalSlots
	}
	return 0
}

func (x *TNodeResources) GetRepairSlots() int32 {
	if x != nil && x.RepairSlots != nil {
		return *x.RepairSlots
	}
	return 0
}

func (x *TNodeResources) GetSealSlots() int32 {
	if x != nil && x.SealSlots != nil {
		return *x.SealSlots
	}
	return 0
}

func (x *TNodeResources) GetMergeSlots() int32 {
	if x != nil && x.MergeSlots != nil {
		return *x.MergeSlots
	}
	return 0
}

func (x *TNodeResources) GetAutotomySlots() int32 {
	if x != nil && x.AutotomySlots != nil {
		return *x.AutotomySlots
	}
	return 0
}

func (x *TNodeResources) GetReincarnationSlots() int32 {
	if x != nil && x.ReincarnationSlots != nil {
		return *x.ReincarnationSlots
	}
	return 0
}

func (x *TNodeResources) GetReplicationDataSize() int64 {
	if x != nil && x.ReplicationDataSize != nil {
		return *x.ReplicationDataSize
	}
	return 0
}

func (x *TNodeResources) GetRepairDataSize() int64 {
	if x != nil && x.RepairDataSize != nil {
		return *x.RepairDataSize
	}
	return 0
}

func (x *TNodeResources) GetMergeDataSize() int64 {
	if x != nil && x.MergeDataSize != nil {
		return *x.MergeDataSize
	}
	return 0
}

func (x *TNodeResources) GetSystemMemory() int64 {
	if x != nil && x.SystemMemory != nil {
		return *x.SystemMemory
	}
	return 0
}

func (x *TNodeResources) GetGpu() int32 {
	if x != nil && x.Gpu != nil {
		return *x.Gpu
	}
	return 0
}

func (x *TNodeResources) GetVcpu() float64 {
	if x != nil && x.Vcpu != nil {
		return *x.Vcpu
	}
	return 0
}

type TDiskLocationResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Usage       *int64 `protobuf:"varint,1,req,name=usage" json:"usage,omitempty"`
	Limit       *int64 `protobuf:"varint,2,req,name=limit" json:"limit,omitempty"`
	MediumIndex *int32 `protobuf:"varint,3,opt,name=medium_index,json=mediumIndex" json:"medium_index,omitempty"`
}

func (x *TDiskLocationResources) Reset() {
	*x = TDiskLocationResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDiskLocationResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDiskLocationResources) ProtoMessage() {}

func (x *TDiskLocationResources) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDiskLocationResources.ProtoReflect.Descriptor instead.
func (*TDiskLocationResources) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{10}
}

func (x *TDiskLocationResources) GetUsage() int64 {
	if x != nil && x.Usage != nil {
		return *x.Usage
	}
	return 0
}

func (x *TDiskLocationResources) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *TDiskLocationResources) GetMediumIndex() int32 {
	if x != nil && x.MediumIndex != nil {
		return *x.MediumIndex
	}
	return 0
}

type TDiskResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskLocationResources []*TDiskLocationResources `protobuf:"bytes,1,rep,name=disk_location_resources,json=diskLocationResources" json:"disk_location_resources,omitempty"`
	// Default medium that should be used for jobs without specified disk requests.
	DefaultMediumIndex *int32 `protobuf:"varint,2,opt,name=default_medium_index,json=defaultMediumIndex" json:"default_medium_index,omitempty"`
}

func (x *TDiskResources) Reset() {
	*x = TDiskResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDiskResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDiskResources) ProtoMessage() {}

func (x *TDiskResources) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDiskResources.ProtoReflect.Descriptor instead.
func (*TDiskResources) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{11}
}

func (x *TDiskResources) GetDiskLocationResources() []*TDiskLocationResources {
	if x != nil {
		return x.DiskLocationResources
	}
	return nil
}

func (x *TDiskResources) GetDefaultMediumIndex() int32 {
	if x != nil && x.DefaultMediumIndex != nil {
		return *x.DefaultMediumIndex
	}
	return 0
}

// Limits overrides pushed from master to node.
type TNodeResourceLimitsOverrides struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu                 *float64 `protobuf:"fixed64,1,opt,name=cpu" json:"cpu,omitempty"`
	Network             *int32   `protobuf:"varint,2,opt,name=network" json:"network,omitempty"`
	ReplicationSlots    *int32   `protobuf:"varint,3,opt,name=replication_slots,json=replicationSlots" json:"replication_slots,omitempty"`
	ReplicationDataSize *int64   `protobuf:"varint,4,opt,name=replication_data_size,json=replicationDataSize" json:"replication_data_size,omitempty"`
	MergeDataSize       *int64   `protobuf:"varint,13,opt,name=merge_data_size,json=mergeDataSize" json:"merge_data_size,omitempty"`
	RemovalSlots        *int32   `protobuf:"varint,5,opt,name=removal_slots,json=removalSlots" json:"removal_slots,omitempty"`
	RepairSlots         *int32   `protobuf:"varint,6,opt,name=repair_slots,json=repairSlots" json:"repair_slots,omitempty"`
	RepairDataSize      *int64   `protobuf:"varint,7,opt,name=repair_data_size,json=repairDataSize" json:"repair_data_size,omitempty"`
	SealSlots           *int32   `protobuf:"varint,8,opt,name=seal_slots,json=sealSlots" json:"seal_slots,omitempty"`
	MergeSlots          *int32   `protobuf:"varint,12,opt,name=merge_slots,json=mergeSlots" json:"merge_slots,omitempty"`
	AutotomySlots       *int32   `protobuf:"varint,14,opt,name=autotomy_slots,json=autotomySlots" json:"autotomy_slots,omitempty"`
	ReincarnationSlots  *int32   `protobuf:"varint,15,opt,name=reincarnation_slots,json=reincarnationSlots" json:"reincarnation_slots,omitempty"`
	UserMemory          *int64   `protobuf:"varint,9,opt,name=user_memory,json=userMemory" json:"user_memory,omitempty"`
	SystemMemory        *int64   `protobuf:"varint,10,opt,name=system_memory,json=systemMemory" json:"system_memory,omitempty"`
	Gpu                 *int32   `protobuf:"varint,11,opt,name=gpu" json:"gpu,omitempty"`
}

func (x *TNodeResourceLimitsOverrides) Reset() {
	*x = TNodeResourceLimitsOverrides{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TNodeResourceLimitsOverrides) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TNodeResourceLimitsOverrides) ProtoMessage() {}

func (x *TNodeResourceLimitsOverrides) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TNodeResourceLimitsOverrides.ProtoReflect.Descriptor instead.
func (*TNodeResourceLimitsOverrides) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{12}
}

func (x *TNodeResourceLimitsOverrides) GetCpu() float64 {
	if x != nil && x.Cpu != nil {
		return *x.Cpu
	}
	return 0
}

func (x *TNodeResourceLimitsOverrides) GetNetwork() int32 {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return 0
}

func (x *TNodeResourceLimitsOverrides) GetReplicationSlots() int32 {
	if x != nil && x.ReplicationSlots != nil {
		return *x.ReplicationSlots
	}
	return 0
}

func (x *TNodeResourceLimitsOverrides) GetReplicationDataSize() int64 {
	if x != nil && x.ReplicationDataSize != nil {
		return *x.ReplicationDataSize
	}
	return 0
}

func (x *TNodeResourceLimitsOverrides) GetMergeDataSize() int64 {
	if x != nil && x.MergeDataSize != nil {
		return *x.MergeDataSize
	}
	return 0
}

func (x *TNodeResourceLimitsOverrides) GetRemovalSlots() int32 {
	if x != nil && x.RemovalSlots != nil {
		return *x.RemovalSlots
	}
	return 0
}

func (x *TNodeResourceLimitsOverrides) GetRepairSlots() int32 {
	if x != nil && x.RepairSlots != nil {
		return *x.RepairSlots
	}
	return 0
}

func (x *TNodeResourceLimitsOverrides) GetRepairDataSize() int64 {
	if x != nil && x.RepairDataSize != nil {
		return *x.RepairDataSize
	}
	return 0
}

func (x *TNodeResourceLimitsOverrides) GetSealSlots() int32 {
	if x != nil && x.SealSlots != nil {
		return *x.SealSlots
	}
	return 0
}

func (x *TNodeResourceLimitsOverrides) GetMergeSlots() int32 {
	if x != nil && x.MergeSlots != nil {
		return *x.MergeSlots
	}
	return 0
}

func (x *TNodeResourceLimitsOverrides) GetAutotomySlots() int32 {
	if x != nil && x.AutotomySlots != nil {
		return *x.AutotomySlots
	}
	return 0
}

func (x *TNodeResourceLimitsOverrides) GetReincarnationSlots() int32 {
	if x != nil && x.ReincarnationSlots != nil {
		return *x.ReincarnationSlots
	}
	return 0
}

func (x *TNodeResourceLimitsOverrides) GetUserMemory() int64 {
	if x != nil && x.UserMemory != nil {
		return *x.UserMemory
	}
	return 0
}

func (x *TNodeResourceLimitsOverrides) GetSystemMemory() int64 {
	if x != nil && x.SystemMemory != nil {
		return *x.SystemMemory
	}
	return 0
}

func (x *TNodeResourceLimitsOverrides) GetGpu() int32 {
	if x != nil && x.Gpu != nil {
		return *x.Gpu
	}
	return 0
}

// A collection of network name to address mappings.
type TAddressMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*TAddressMap_TAddressEntry `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
}

func (x *TAddressMap) Reset() {
	*x = TAddressMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAddressMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAddressMap) ProtoMessage() {}

func (x *TAddressMap) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAddressMap.ProtoReflect.Descriptor instead.
func (*TAddressMap) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{13}
}

func (x *TAddressMap) GetEntries() []*TAddressMap_TAddressEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type TNodeAddressMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*TNodeAddressMap_TAddressEntry `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
}

func (x *TNodeAddressMap) Reset() {
	*x = TNodeAddressMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TNodeAddressMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TNodeAddressMap) ProtoMessage() {}

func (x *TNodeAddressMap) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TNodeAddressMap.ProtoReflect.Descriptor instead.
func (*TNodeAddressMap) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{14}
}

func (x *TNodeAddressMap) GetEntries() []*TNodeAddressMap_TAddressEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type TNodeDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses    *TAddressMap `protobuf:"bytes,1,req,name=addresses" json:"addresses,omitempty"`
	Host         *string      `protobuf:"bytes,5,opt,name=host" json:"host,omitempty"`
	Rack         *string      `protobuf:"bytes,2,opt,name=rack" json:"rack,omitempty"`
	DataCenter   *string      `protobuf:"bytes,3,opt,name=data_center,json=dataCenter" json:"data_center,omitempty"`
	Tags         []string     `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
	LastSeenTime *int64       `protobuf:"varint,6,opt,name=last_seen_time,json=lastSeenTime" json:"last_seen_time,omitempty"`
}

func (x *TNodeDescriptor) Reset() {
	*x = TNodeDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TNodeDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TNodeDescriptor) ProtoMessage() {}

func (x *TNodeDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TNodeDescriptor.ProtoReflect.Descriptor instead.
func (*TNodeDescriptor) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{15}
}

func (x *TNodeDescriptor) GetAddresses() *TAddressMap {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *TNodeDescriptor) GetHost() string {
	if x != nil && x.Host != nil {
		return *x.Host
	}
	return ""
}

func (x *TNodeDescriptor) GetRack() string {
	if x != nil && x.Rack != nil {
		return *x.Rack
	}
	return ""
}

func (x *TNodeDescriptor) GetDataCenter() string {
	if x != nil && x.DataCenter != nil {
		return *x.DataCenter
	}
	return ""
}

func (x *TNodeDescriptor) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *TNodeDescriptor) GetLastSeenTime() int64 {
	if x != nil && x.LastSeenTime != nil {
		return *x.LastSeenTime
	}
	return 0
}

type TClusterNodeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Memory  *TMemoryStatistics    `protobuf:"bytes,1,req,name=memory" json:"memory,omitempty"`
	Network []*TNetworkStatistics `protobuf:"bytes,2,rep,name=network" json:"network,omitempty"`
	Cpu     *TCpuStatistics       `protobuf:"bytes,3,opt,name=cpu" json:"cpu,omitempty"`
}

func (x *TClusterNodeStatistics) Reset() {
	*x = TClusterNodeStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TClusterNodeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TClusterNodeStatistics) ProtoMessage() {}

func (x *TClusterNodeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TClusterNodeStatistics.ProtoReflect.Descriptor instead.
func (*TClusterNodeStatistics) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{16}
}

func (x *TClusterNodeStatistics) GetMemory() *TMemoryStatistics {
	if x != nil {
		return x.Memory
	}
	return nil
}

func (x *TClusterNodeStatistics) GetNetwork() []*TNetworkStatistics {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *TClusterNodeStatistics) GetCpu() *TCpuStatistics {
	if x != nil {
		return x.Cpu
	}
	return nil
}

type TDataNodeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalAvailableSpace          *int64                      `protobuf:"varint,1,req,name=total_available_space,json=totalAvailableSpace" json:"total_available_space,omitempty"`
	TotalUsedSpace               *int64                      `protobuf:"varint,2,req,name=total_used_space,json=totalUsedSpace" json:"total_used_space,omitempty"`
	TotalStoredChunkCount        *int32                      `protobuf:"varint,3,req,name=total_stored_chunk_count,json=totalStoredChunkCount" json:"total_stored_chunk_count,omitempty"`
	TotalCachedChunkCount        *int32                      `protobuf:"varint,4,req,name=total_cached_chunk_count,json=totalCachedChunkCount" json:"total_cached_chunk_count,omitempty"`
	TotalUserSessionCount        *int32                      `protobuf:"varint,5,req,name=total_user_session_count,json=totalUserSessionCount" json:"total_user_session_count,omitempty"`
	TotalReplicationSessionCount *int32                      `protobuf:"varint,6,req,name=total_replication_session_count,json=totalReplicationSessionCount" json:"total_replication_session_count,omitempty"`
	TotalRepairSessionCount      *int32                      `protobuf:"varint,7,req,name=total_repair_session_count,json=totalRepairSessionCount" json:"total_repair_session_count,omitempty"`
	TotalLowWatermarkSpace       *int64                      `protobuf:"varint,8,req,name=total_low_watermark_space,json=totalLowWatermarkSpace" json:"total_low_watermark_space,omitempty"`
	Full                         *bool                       `protobuf:"varint,9,req,name=full" json:"full,omitempty"`
	ChunkLocations               []*TChunkLocationStatistics `protobuf:"bytes,10,rep,name=chunk_locations,json=chunkLocations" json:"chunk_locations,omitempty"`
	Media                        []*TMediumStatistics        `protobuf:"bytes,11,rep,name=media" json:"media,omitempty"`
}

func (x *TDataNodeStatistics) Reset() {
	*x = TDataNodeStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TDataNodeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TDataNodeStatistics) ProtoMessage() {}

func (x *TDataNodeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TDataNodeStatistics.ProtoReflect.Descriptor instead.
func (*TDataNodeStatistics) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{17}
}

func (x *TDataNodeStatistics) GetTotalAvailableSpace() int64 {
	if x != nil && x.TotalAvailableSpace != nil {
		return *x.TotalAvailableSpace
	}
	return 0
}

func (x *TDataNodeStatistics) GetTotalUsedSpace() int64 {
	if x != nil && x.TotalUsedSpace != nil {
		return *x.TotalUsedSpace
	}
	return 0
}

func (x *TDataNodeStatistics) GetTotalStoredChunkCount() int32 {
	if x != nil && x.TotalStoredChunkCount != nil {
		return *x.TotalStoredChunkCount
	}
	return 0
}

func (x *TDataNodeStatistics) GetTotalCachedChunkCount() int32 {
	if x != nil && x.TotalCachedChunkCount != nil {
		return *x.TotalCachedChunkCount
	}
	return 0
}

func (x *TDataNodeStatistics) GetTotalUserSessionCount() int32 {
	if x != nil && x.TotalUserSessionCount != nil {
		return *x.TotalUserSessionCount
	}
	return 0
}

func (x *TDataNodeStatistics) GetTotalReplicationSessionCount() int32 {
	if x != nil && x.TotalReplicationSessionCount != nil {
		return *x.TotalReplicationSessionCount
	}
	return 0
}

func (x *TDataNodeStatistics) GetTotalRepairSessionCount() int32 {
	if x != nil && x.TotalRepairSessionCount != nil {
		return *x.TotalRepairSessionCount
	}
	return 0
}

func (x *TDataNodeStatistics) GetTotalLowWatermarkSpace() int64 {
	if x != nil && x.TotalLowWatermarkSpace != nil {
		return *x.TotalLowWatermarkSpace
	}
	return 0
}

func (x *TDataNodeStatistics) GetFull() bool {
	if x != nil && x.Full != nil {
		return *x.Full
	}
	return false
}

func (x *TDataNodeStatistics) GetChunkLocations() []*TChunkLocationStatistics {
	if x != nil {
		return x.ChunkLocations
	}
	return nil
}

func (x *TDataNodeStatistics) GetMedia() []*TMediumStatistics {
	if x != nil {
		return x.Media
	}
	return nil
}

type TExecNodeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotLocations []*TSlotLocationStatistics `protobuf:"bytes,1,rep,name=slot_locations,json=slotLocations" json:"slot_locations,omitempty"`
}

func (x *TExecNodeStatistics) Reset() {
	*x = TExecNodeStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TExecNodeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TExecNodeStatistics) ProtoMessage() {}

func (x *TExecNodeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TExecNodeStatistics.ProtoReflect.Descriptor instead.
func (*TExecNodeStatistics) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{18}
}

func (x *TExecNodeStatistics) GetSlotLocations() []*TSlotLocationStatistics {
	if x != nil {
		return x.SlotLocations
	}
	return nil
}

type TCellarNodeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailableCellSlots *int32 `protobuf:"varint,1,req,name=available_cell_slots,json=availableCellSlots" json:"available_cell_slots,omitempty"`
	UsedCellSlots      *int32 `protobuf:"varint,2,req,name=used_cell_slots,json=usedCellSlots" json:"used_cell_slots,omitempty"`
}

func (x *TCellarNodeStatistics) Reset() {
	*x = TCellarNodeStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TCellarNodeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TCellarNodeStatistics) ProtoMessage() {}

func (x *TCellarNodeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TCellarNodeStatistics.ProtoReflect.Descriptor instead.
func (*TCellarNodeStatistics) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{19}
}

func (x *TCellarNodeStatistics) GetAvailableCellSlots() int32 {
	if x != nil && x.AvailableCellSlots != nil {
		return *x.AvailableCellSlots
	}
	return 0
}

func (x *TCellarNodeStatistics) GetUsedCellSlots() int32 {
	if x != nil && x.UsedCellSlots != nil {
		return *x.UsedCellSlots
	}
	return 0
}

type TMemoryStatistics_TCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"` // EMemoryCategory
	Used  *int64 `protobuf:"varint,2,req,name=used" json:"used,omitempty"`
	Limit *int64 `protobuf:"varint,3,opt,name=limit" json:"limit,omitempty"`
}

func (x *TMemoryStatistics_TCategory) Reset() {
	*x = TMemoryStatistics_TCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TMemoryStatistics_TCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TMemoryStatistics_TCategory) ProtoMessage() {}

func (x *TMemoryStatistics_TCategory) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TMemoryStatistics_TCategory.ProtoReflect.Descriptor instead.
func (*TMemoryStatistics_TCategory) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{4, 0}
}

func (x *TMemoryStatistics_TCategory) GetType() int32 {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return 0
}

func (x *TMemoryStatistics_TCategory) GetUsed() int64 {
	if x != nil && x.Used != nil {
		return *x.Used
	}
	return 0
}

func (x *TMemoryStatistics_TCategory) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type TAddressMap_TAddressEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network *string `protobuf:"bytes,1,req,name=network" json:"network,omitempty"`
	Address *string `protobuf:"bytes,2,req,name=address" json:"address,omitempty"`
}

func (x *TAddressMap_TAddressEntry) Reset() {
	*x = TAddressMap_TAddressEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TAddressMap_TAddressEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TAddressMap_TAddressEntry) ProtoMessage() {}

func (x *TAddressMap_TAddressEntry) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TAddressMap_TAddressEntry.ProtoReflect.Descriptor instead.
func (*TAddressMap_TAddressEntry) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{13, 0}
}

func (x *TAddressMap_TAddressEntry) GetNetwork() string {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return ""
}

func (x *TAddressMap_TAddressEntry) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

type TNodeAddressMap_TAddressEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressType *int32       `protobuf:"varint,1,req,name=address_type,json=addressType" json:"address_type,omitempty"`
	Addresses   *TAddressMap `protobuf:"bytes,2,req,name=addresses" json:"addresses,omitempty"`
}

func (x *TNodeAddressMap_TAddressEntry) Reset() {
	*x = TNodeAddressMap_TAddressEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TNodeAddressMap_TAddressEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TNodeAddressMap_TAddressEntry) ProtoMessage() {}

func (x *TNodeAddressMap_TAddressEntry) ProtoReflect() protoreflect.Message {
	mi := &file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TNodeAddressMap_TAddressEntry.ProtoReflect.Descriptor instead.
func (*TNodeAddressMap_TAddressEntry) Descriptor() ([]byte, []int) {
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP(), []int{14, 0}
}

func (x *TNodeAddressMap_TAddressEntry) GetAddressType() int32 {
	if x != nil && x.AddressType != nil {
		return *x.AddressType
	}
	return 0
}

func (x *TNodeAddressMap_TAddressEntry) GetAddresses() *TAddressMap {
	if x != nil {
		return x.Addresses
	}
	return nil
}

var File_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto protoreflect.FileDescriptor

var file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x79, 0x74, 0x2f, 0x79, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x74,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x4e, 0x59,
	0x54, 0x2e, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x79, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x74, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x69,
	0x73, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x75, 0x69, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x79, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x79, 0x74,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6d, 0x69, 0x73, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5c, 0x0a, 0x16,
	0x54, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65,
	0x64, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75,
	0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa1, 0x02, 0x0a, 0x0d, 0x54,
	0x49, 0x4f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x61, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x6b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64, 0x69,
	0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x2e,
	0x0a, 0x13, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x64, 0x69, 0x73,
	0x6b, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0xdf,
	0x04, 0x0a, 0x18, 0x54, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x47, 0x75, 0x69, 0x64, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x66, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65,
	0x64, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x75,
	0x73, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x77, 0x5f,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x6f, 0x77, 0x57, 0x61, 0x74, 0x65, 0x72, 0x6d,
	0x61, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05,
	0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c,
	0x18, 0x06, 0x20, 0x02, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x12, 0x30, 0x0a, 0x10,
	0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x74,
	0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61, 0x64, 0x73, 0x12, 0x32,
	0x0a, 0x11, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x10, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x73, 0x12, 0x19, 0x0a, 0x04, 0x73, 0x69, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x04, 0x73, 0x69, 0x63, 0x6b, 0x12, 0x51, 0x0a,
	0x0d, 0x69, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x49, 0x4f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x0c, 0x69, 0x6f, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x22, 0xda, 0x01, 0x0a, 0x17, 0x54, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6c, 0x6f, 0x74, 0x5f,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0f, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xfa, 0x01,
	0x0a, 0x11, 0x54, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x1a,
	0x49, 0x0a, 0x09, 0x54, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x0e, 0x54,
	0x43, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x01, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x75, 0x61,
	0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x02, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18,
	0x05, 0x20, 0x02, 0x28, 0x01, 0x52, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x22, 0x53, 0x0a, 0x11, 0x54,
	0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6f, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x01, 0x52, 0x08, 0x69, 0x6f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x22, 0x60, 0x0a, 0x12, 0x54, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x30, 0x0a, 0x10, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x0f, 0x74, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x61,
	0x64, 0x73, 0x22, 0xb0, 0x08, 0x0a, 0x0f, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a,
	0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x45, 0x0a, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x02, 0x28, 0x05, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x77,
	0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x0e, 0x20, 0x02, 0x28, 0x03, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x77,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x02, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75,
	0x6c, 0x6c, 0x12, 0x60, 0x0a, 0x0f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x4e, 0x59,
	0x54, 0x2e, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0b,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x14, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18,
	0x0c, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x0f, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x46, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x4b, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x4e, 0x59, 0x54, 0x2e,
	0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x5d, 0x0a, 0x0e, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53,
	0x6c, 0x6f, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x43, 0x70, 0x75, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x03, 0x63, 0x70, 0x75, 0x22, 0xda, 0x04, 0x0a, 0x0e, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61,
	0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61,
	0x6c, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73,
	0x65, 0x61, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x67,
	0x65, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74,
	0x6f, 0x74, 0x6f, 0x6d, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x6f, 0x6d, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x73,
	0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x69, 0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72,
	0x65, 0x69, 0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x70, 0x75, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x12,
	0x0a, 0x04, 0x76, 0x63, 0x70, 0x75, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x76, 0x63,
	0x70, 0x75, 0x22, 0x67, 0x0a, 0x16, 0x54, 0x44, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x05, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69,
	0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xb1, 0x01, 0x0a, 0x0e,
	0x54, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x6d,
	0x0a, 0x17, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x54, 0x44, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x15, 0x64, 0x69, 0x73, 0x6b, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0xb5, 0x04, 0x0a, 0x1c, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x63,
	0x70, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x11,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6c, 0x6f, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a,
	0x0f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x70, 0x61, 0x69, 0x72, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x6c, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x61,
	0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x6f, 0x74,
	0x6f, 0x6d, 0x79, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x6f, 0x6d, 0x79, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x2f,
	0x0a, 0x13, 0x72, 0x65, 0x69, 0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x69,
	0x6e, 0x63, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x75, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x67, 0x70, 0x75, 0x22, 0xa6, 0x01, 0x0a, 0x0b, 0x54, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x52, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4d, 0x61, 0x70, 0x2e, 0x54, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x0d, 0x54,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0xe7, 0x01, 0x0a, 0x0f, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x4d, 0x61, 0x70, 0x12, 0x56, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4d, 0x61, 0x70, 0x2e, 0x54, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x7c, 0x0a, 0x0d,
	0x54, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x48, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x52,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x0f, 0x54,
	0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x48,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x63, 0x6b,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65,
	0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x16,
	0x54, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x4b, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x3f, 0x0a,
	0x03, 0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x4e, 0x59, 0x54,
	0x2e, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x70, 0x75, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x03, 0x63, 0x70, 0x75, 0x22, 0x9b,
	0x05, 0x0a, 0x13, 0x54, 0x44, 0x61, 0x74, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x03, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x73, 0x65, 0x64, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x02, 0x28, 0x05, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a,
	0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52,
	0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x02, 0x28, 0x05, 0x52, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x45, 0x0a, 0x1f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x02, 0x28, 0x05, 0x52, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x02, 0x28, 0x05, 0x52, 0x17, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x77,
	0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x02, 0x28, 0x03, 0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x6f, 0x77,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x75, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x02, 0x28, 0x08, 0x52, 0x04, 0x66, 0x75,
	0x6c, 0x6c, 0x12, 0x60, 0x0a, 0x0f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x4e, 0x59,
	0x54, 0x2e, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x4e, 0x59, 0x54, 0x2e, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x4d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x74, 0x0a, 0x13,
	0x54, 0x45, 0x78, 0x65, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x5d, 0x0a, 0x0e, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x4e, 0x59,
	0x54, 0x2e, 0x4e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x4e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x53, 0x6c, 0x6f,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x0d, 0x73, 0x6c, 0x6f, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x71, 0x0a, 0x15, 0x54, 0x43, 0x65, 0x6c, 0x6c, 0x61, 0x72, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x12, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c,
	0x53, 0x6c, 0x6f, 0x74, 0x73, 0x42, 0x39, 0x5a, 0x37, 0x61, 0x2e, 0x79, 0x61, 0x6e, 0x64, 0x65,
	0x78, 0x2d, 0x74, 0x65, 0x61, 0x6d, 0x2e, 0x72, 0x75, 0x2f, 0x79, 0x74, 0x2f, 0x67, 0x6f, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
}

var (
	file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescOnce sync.Once
	file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescData = file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDesc
)

func file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescGZIP() []byte {
	file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescOnce.Do(func() {
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescData)
	})
	return file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDescData
}

var file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_goTypes = []interface{}{
	(*TMediumChunkStatistics)(nil),        // 0: NYT.NNodeTrackerClient.NProto.TMediumChunkStatistics
	(*TIOStatistics)(nil),                 // 1: NYT.NNodeTrackerClient.NProto.TIOStatistics
	(*TChunkLocationStatistics)(nil),      // 2: NYT.NNodeTrackerClient.NProto.TChunkLocationStatistics
	(*TSlotLocationStatistics)(nil),       // 3: NYT.NNodeTrackerClient.NProto.TSlotLocationStatistics
	(*TMemoryStatistics)(nil),             // 4: NYT.NNodeTrackerClient.NProto.TMemoryStatistics
	(*TCpuStatistics)(nil),                // 5: NYT.NNodeTrackerClient.NProto.TCpuStatistics
	(*TMediumStatistics)(nil),             // 6: NYT.NNodeTrackerClient.NProto.TMediumStatistics
	(*TNetworkStatistics)(nil),            // 7: NYT.NNodeTrackerClient.NProto.TNetworkStatistics
	(*TNodeStatistics)(nil),               // 8: NYT.NNodeTrackerClient.NProto.TNodeStatistics
	(*TNodeResources)(nil),                // 9: NYT.NNodeTrackerClient.NProto.TNodeResources
	(*TDiskLocationResources)(nil),        // 10: NYT.NNodeTrackerClient.NProto.TDiskLocationResources
	(*TDiskResources)(nil),                // 11: NYT.NNodeTrackerClient.NProto.TDiskResources
	(*TNodeResourceLimitsOverrides)(nil),  // 12: NYT.NNodeTrackerClient.NProto.TNodeResourceLimitsOverrides
	(*TAddressMap)(nil),                   // 13: NYT.NNodeTrackerClient.NProto.TAddressMap
	(*TNodeAddressMap)(nil),               // 14: NYT.NNodeTrackerClient.NProto.TNodeAddressMap
	(*TNodeDescriptor)(nil),               // 15: NYT.NNodeTrackerClient.NProto.TNodeDescriptor
	(*TClusterNodeStatistics)(nil),        // 16: NYT.NNodeTrackerClient.NProto.TClusterNodeStatistics
	(*TDataNodeStatistics)(nil),           // 17: NYT.NNodeTrackerClient.NProto.TDataNodeStatistics
	(*TExecNodeStatistics)(nil),           // 18: NYT.NNodeTrackerClient.NProto.TExecNodeStatistics
	(*TCellarNodeStatistics)(nil),         // 19: NYT.NNodeTrackerClient.NProto.TCellarNodeStatistics
	(*TMemoryStatistics_TCategory)(nil),   // 20: NYT.NNodeTrackerClient.NProto.TMemoryStatistics.TCategory
	(*TAddressMap_TAddressEntry)(nil),     // 21: NYT.NNodeTrackerClient.NProto.TAddressMap.TAddressEntry
	(*TNodeAddressMap_TAddressEntry)(nil), // 22: NYT.NNodeTrackerClient.NProto.TNodeAddressMap.TAddressEntry
	(*misc.TGuid)(nil),                    // 23: NYT.NProto.TGuid
	(*misc.TError)(nil),                   // 24: NYT.NProto.TError
}
var file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_depIdxs = []int32{
	23, // 0: NYT.NNodeTrackerClient.NProto.TChunkLocationStatistics.location_uuid:type_name -> NYT.NProto.TGuid
	1,  // 1: NYT.NNodeTrackerClient.NProto.TChunkLocationStatistics.io_statistics:type_name -> NYT.NNodeTrackerClient.NProto.TIOStatistics
	24, // 2: NYT.NNodeTrackerClient.NProto.TSlotLocationStatistics.error:type_name -> NYT.NProto.TError
	20, // 3: NYT.NNodeTrackerClient.NProto.TMemoryStatistics.categories:type_name -> NYT.NNodeTrackerClient.NProto.TMemoryStatistics.TCategory
	2,  // 4: NYT.NNodeTrackerClient.NProto.TNodeStatistics.chunk_locations:type_name -> NYT.NNodeTrackerClient.NProto.TChunkLocationStatistics
	4,  // 5: NYT.NNodeTrackerClient.NProto.TNodeStatistics.memory:type_name -> NYT.NNodeTrackerClient.NProto.TMemoryStatistics
	6,  // 6: NYT.NNodeTrackerClient.NProto.TNodeStatistics.media:type_name -> NYT.NNodeTrackerClient.NProto.TMediumStatistics
	7,  // 7: NYT.NNodeTrackerClient.NProto.TNodeStatistics.network:type_name -> NYT.NNodeTrackerClient.NProto.TNetworkStatistics
	3,  // 8: NYT.NNodeTrackerClient.NProto.TNodeStatistics.slot_locations:type_name -> NYT.NNodeTrackerClient.NProto.TSlotLocationStatistics
	5,  // 9: NYT.NNodeTrackerClient.NProto.TNodeStatistics.cpu:type_name -> NYT.NNodeTrackerClient.NProto.TCpuStatistics
	10, // 10: NYT.NNodeTrackerClient.NProto.TDiskResources.disk_location_resources:type_name -> NYT.NNodeTrackerClient.NProto.TDiskLocationResources
	21, // 11: NYT.NNodeTrackerClient.NProto.TAddressMap.entries:type_name -> NYT.NNodeTrackerClient.NProto.TAddressMap.TAddressEntry
	22, // 12: NYT.NNodeTrackerClient.NProto.TNodeAddressMap.entries:type_name -> NYT.NNodeTrackerClient.NProto.TNodeAddressMap.TAddressEntry
	13, // 13: NYT.NNodeTrackerClient.NProto.TNodeDescriptor.addresses:type_name -> NYT.NNodeTrackerClient.NProto.TAddressMap
	4,  // 14: NYT.NNodeTrackerClient.NProto.TClusterNodeStatistics.memory:type_name -> NYT.NNodeTrackerClient.NProto.TMemoryStatistics
	7,  // 15: NYT.NNodeTrackerClient.NProto.TClusterNodeStatistics.network:type_name -> NYT.NNodeTrackerClient.NProto.TNetworkStatistics
	5,  // 16: NYT.NNodeTrackerClient.NProto.TClusterNodeStatistics.cpu:type_name -> NYT.NNodeTrackerClient.NProto.TCpuStatistics
	2,  // 17: NYT.NNodeTrackerClient.NProto.TDataNodeStatistics.chunk_locations:type_name -> NYT.NNodeTrackerClient.NProto.TChunkLocationStatistics
	6,  // 18: NYT.NNodeTrackerClient.NProto.TDataNodeStatistics.media:type_name -> NYT.NNodeTrackerClient.NProto.TMediumStatistics
	3,  // 19: NYT.NNodeTrackerClient.NProto.TExecNodeStatistics.slot_locations:type_name -> NYT.NNodeTrackerClient.NProto.TSlotLocationStatistics
	13, // 20: NYT.NNodeTrackerClient.NProto.TNodeAddressMap.TAddressEntry.addresses:type_name -> NYT.NNodeTrackerClient.NProto.TAddressMap
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_init() }
func file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_init() {
	if File_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMediumChunkStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TIOStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TChunkLocationStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSlotLocationStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMemoryStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCpuStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMediumStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TNetworkStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TNodeStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TNodeResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDiskLocationResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDiskResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TNodeResourceLimitsOverrides); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAddressMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TNodeAddressMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TNodeDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TClusterNodeStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TDataNodeStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TExecNodeStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TCellarNodeStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TMemoryStatistics_TCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TAddressMap_TAddressEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TNodeAddressMap_TAddressEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_goTypes,
		DependencyIndexes: file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_depIdxs,
		MessageInfos:      file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_msgTypes,
	}.Build()
	File_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto = out.File
	file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_rawDesc = nil
	file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_goTypes = nil
	file_yt_yt_proto_yt_client_node_tracker_client_proto_node_proto_depIdxs = nil
}
