// Package yt defines interfaces of different YT services.
//
// All API methods follow the same conventions:
//   - First argument is context.Context.
//   - Last argument is pointer to Options struct.
//   - Other arguments are required parameters.
//
// Zero value of every Options struct corresponds to default values of parameters.
//
// You may pass nil as the last argument.
//
//	var ctx context.Context
//	var y yt.Client
//	p := ypath.Path("//foo/bar/@zog")
//
//	// These two calls do the same thing.
//	y.SetNode(ctx, p, 1, nil)
//	y.SetNode(ctx, p, 1, &yt.SetNodeOptions{})
//
// By default, client retries all transient errors 5 times. Use context.WithTimeout to provide timeout for api call.
//
// API methods are grouped into interfaces, according to part of the system they interact with:
//   - CypressClient           - cypress nodes
//   - LowLevelTxClient        - cypress transactions
//   - LockClient              - cypress locks
//   - LowLevelSchedulerClient - scheduler
//   - FileClient              - file operations
//   - TableClient             - table operations
//   - AdminClient             - misc administrative commands
//   - TabletClient            - dynamic tables
//
// Finally, yt.Client and yt.Tx provide high level api for transactions and embed interfaces of different subsystems.
package yt

import (
	"context"
	"io"

	"go.ytsaurus.tech/library/go/core/log"
	"go.ytsaurus.tech/library/go/core/xerrors"
	"go.ytsaurus.tech/yt/go/guid"
	"go.ytsaurus.tech/yt/go/schema"
	"go.ytsaurus.tech/yt/go/ypath"
	"go.ytsaurus.tech/yt/go/yson"
	"go.ytsaurus.tech/yt/go/yterrors"
)

//go:generate yt-gen-client -interface interface.go -output internal/params_gen.go

// TransactionOptions control transactional context of cypress command.
//
// Do not use this options directly. Use Transaction instead.
type TransactionOptions struct {
	TransactionID                      TxID `http:"transaction_id,omitempty"`
	Ping                               bool `http:"ping"`
	PingAncestors                      bool `http:"ping_ancestor_transactions"`
	SuppressTransactionCoordinatorSync bool `http:"suppress_transaction_coordinator_sync"`
	SuppressUpstreamSync               bool `http:"suppress_upstream_sync"`
}

// AccessTrackingOptions suppresses update of "modification_time", "access_time" and
// "access_counter" cypress attributes.
type AccessTrackingOptions struct {
	SuppressAccessTracking       bool `http:"suppress_access_tracking"`
	SuppressModificationTracking bool `http:"suppress_modification_tracking"`
}

// MutatingOptions enable safe retries of cypress commands in the presence of network errors.
//
// If MutatingOptions are missing, MutationID will be generated by the library.
// Otherwise, the passed MutationID will be used for the first request and retries.
//
// The passed Retry value will be used for the first request, and then Retry will be true for retries.
type MutatingOptions struct {
	MutationID MutationID `http:"mutation_id"`
	Retry      bool       `http:"retry"`
}

type ReadKind string

const (
	ReadFromLeader      ReadKind = "leader"
	ReadFromFollower    ReadKind = "follower"
	ReadFromCache       ReadKind = "cache"
	ReadFromMasterCache ReadKind = "master_cache"
)

// ReadRetryOptions is marker for distinguishing requests that might be safely retried.
//
// TODO(prime@): rename to SafeRetryOptions
type ReadRetryOptions struct {
}

// MasterReadOptions specify where cypress read requests are routed.
//
// By default read requests are served from followers.
type MasterReadOptions struct {
	ReadFrom                        ReadKind       `http:"read_from"`
	DisablePerUserCache             *bool          `http:"disable_per_user_cache,omitnil"`
	ExpireAfterSuccessfulUpdateTime *yson.Duration `http:"expire_after_successful_update_time,omitnil"`
	ExpireAfterFailedUpdateTime     *yson.Duration `http:"expire_after_failed_update_time,omitnil"`
	CacheStickyGroupSize            *int32         `http:"cache_sticky_group_size,omitnil"`
	SuccessStalenessBound           *yson.Duration `http:"success_staleness_bound,omitnil"`
}

type PrerequisiteRevision struct {
	Path          ypath.Path `yson:"path"`
	TransactionID TxID       `yson:"transaction_id"`
	Revision      Revision   `yson:"revision"`
}

type PrerequisiteOptions struct {
	TransactionIDs []TxID                 `http:"prerequisite_transaction_ids,omitnil"`
	Revisions      []PrerequisiteRevision `http:"prerequisite_revisions,omitnil"`
}

// TimeoutOptions specify request timeout that is propagated through internal YT RPC framework.
type TimeoutOptions struct {
	Timeout yson.Duration `http:"timeout"`
}

// CreateNodeOptions.
//
// See https://wiki.yandex-team.ru/yt/userdoc/api/#create
type CreateNodeOptions struct {
	Recursive      bool `http:"recursive"`
	IgnoreExisting bool `http:"ignore_existing"`
	Force          bool `http:"force"`

	Attributes map[string]any `http:"attributes,omitnil"`

	*TransactionOptions
	*AccessTrackingOptions
	*MutatingOptions
	*PrerequisiteOptions
}

func (o *CreateNodeOptions) initAttributes() {
	if o.Attributes == nil {
		o.Attributes = make(map[string]any)
	}
}

type CreateObjectOptions struct {
	Recursive      bool `http:"recursive"`
	IgnoreExisting bool `http:"ignore_existing"`
	Force          bool `http:"force"`

	Attributes map[string]any `http:"attributes,omitnil"`

	*PrerequisiteOptions
	*AccessTrackingOptions
	*MutatingOptions
}

type NodeExistsOptions struct {
	*MasterReadOptions
	*TransactionOptions
	*AccessTrackingOptions
	*ReadRetryOptions
}

type RemoveNodeOptions struct {
	Recursive bool `http:"recursive"`
	Force     bool `http:"force"`

	*TransactionOptions
	*AccessTrackingOptions
	*PrerequisiteOptions
	*MutatingOptions
}

type GetNodeOptions struct {
	Attributes []string `http:"attributes,omitnil"`
	MaxSize    *int64   `http:"max_size,omitnil"`

	*TransactionOptions
	*AccessTrackingOptions
	*PrerequisiteOptions
	*MasterReadOptions

	*ReadRetryOptions
}

type SetNodeOptions struct {
	Recursive bool `http:"recursive"`
	Force     bool `http:"force"`

	*TransactionOptions
	*AccessTrackingOptions
	*MutatingOptions
	*PrerequisiteOptions
}

type MultisetAttributesOptions struct {
	*TransactionOptions
	*AccessTrackingOptions
	*MutatingOptions
	*PrerequisiteOptions
}

type ListNodeOptions struct {
	Attributes []string `http:"attributes,omitnil"`
	MaxSize    *int64   `http:"max_size,omitnil"`

	*TransactionOptions
	*MasterReadOptions
	*AccessTrackingOptions
	*PrerequisiteOptions

	*ReadRetryOptions
}

type CopyNodeOptions struct {
	Recursive      bool `http:"recursive"`
	IgnoreExisting bool `http:"ignore_existing"`
	Force          bool `http:"force"`

	PreserveAccount           *bool `http:"preserve_account,omitnil"`
	PreserveExpirationTime    *bool `http:"preserve_expiration_time,omitnil"`
	PreserveExpirationTimeout *bool `http:"preserve_expiration_timeout,omitnil"`
	PreserveCreationTime      *bool `http:"preserve_creation_time,omitnil"`
	PessimisticQuotaCheck     *bool `http:"pessimistic_quota_check,omitnil"`

	// EnableCrossCellCopying option is managed internally by the library.
	EnableCrossCellCopying *bool `http:"enable_cross_cell_copying,omitnil"`

	*TransactionOptions
	// *AccessTrackingOptions
	*MutatingOptions
	*PrerequisiteOptions
}

type MoveNodeOptions struct {
	Recursive bool `http:"recursive"`
	Force     bool `http:"force"`

	PreserveAccount           *bool `http:"preserve_account,omitnil"`
	PreserveExpirationTime    *bool `http:"preserve_expiration_time,omitnil"`
	PreserveExpirationTimeout *bool `http:"preserve_expiration_timeout,omitnil"`
	PessimisticQuotaCheck     *bool `http:"pessimistic_quota_check,omitnil"`

	// EnableCrossCellCopying option is managed internally by the library.
	EnableCrossCellCopying *bool `http:"enable_cross_cell_copying,omitnil"`

	*TransactionOptions
	// *AccessTrackingOptions
	*MutatingOptions
	*PrerequisiteOptions
}

type LinkNodeOptions struct {
	Recursive      bool `http:"recursive"`
	IgnoreExisting bool `http:"ignore_existing"`
	Force          bool `http:"force"`

	Attributes map[string]any `http:"attributes,omitnil"`

	*TransactionOptions
	// *AccessTrackingOptions
	*MutatingOptions
	*PrerequisiteOptions
}

type CypressClient interface {
	// http:verb:"create"
	// http:params:"path","type"
	CreateNode(
		ctx context.Context,
		path ypath.YPath,
		typ NodeType,
		options *CreateNodeOptions,
	) (id NodeID, err error)

	// http:verb:"create"
	// http:params:"type"
	CreateObject(
		ctx context.Context,
		typ NodeType,
		options *CreateObjectOptions,
	) (id NodeID, err error)

	// http:verb:"exists"
	// http:params:"path"
	NodeExists(
		ctx context.Context,
		path ypath.YPath,
		options *NodeExistsOptions,
	) (ok bool, err error)

	// http:verb:"remove"
	// http:params:"path"
	RemoveNode(
		ctx context.Context,
		path ypath.YPath,
		options *RemoveNodeOptions,
	) (err error)

	// http:verb:"get"
	// http:params:"path"
	// http:extra
	GetNode(
		ctx context.Context,
		path ypath.YPath,
		result any,
		options *GetNodeOptions,
	) (err error)

	// http:verb:"set"
	// http:params:"path"
	// http:extra
	SetNode(
		ctx context.Context,
		path ypath.YPath,
		value any,
		options *SetNodeOptions,
	) (err error)

	// http:verb:"multiset_attributes"
	// http:params:"path"
	// http:extra
	MultisetAttributes(
		ctx context.Context,
		path ypath.YPath,
		attributes map[string]any,
		options *MultisetAttributesOptions,
	) (err error)

	// http:verb:"list"
	// http:params:"path"
	// http:extra
	ListNode(
		ctx context.Context,
		path ypath.YPath,
		result any,
		options *ListNodeOptions,
	) (err error)

	// http:verb:"copy"
	// http:params:"source_path","destination_path"
	CopyNode(
		ctx context.Context,
		src ypath.YPath,
		dst ypath.YPath,
		options *CopyNodeOptions,
	) (id NodeID, err error)

	// http:verb:"move"
	// http:params:"source_path","destination_path"
	MoveNode(
		ctx context.Context,
		src ypath.YPath,
		dst ypath.YPath,
		options *MoveNodeOptions,
	) (id NodeID, err error)

	// http:verb:"link"
	// http:params:"target_path","link_path"
	LinkNode(
		ctx context.Context,
		target ypath.YPath,
		link ypath.YPath,
		options *LinkNodeOptions,
	) (id NodeID, err error)
}

type StartTxOptions struct {
	Timeout  *yson.Duration `http:"timeout,omitnil"`
	Deadline *yson.Time     `http:"deadline,omitnil"`

	Type   *TxType `http:"type,omitnil"`
	Sticky bool    `http:"sticky"`

	PrerequisiteTransactionIDs []TxID         `http:"prerequisite_transaction_ids,omitnil"`
	Attributes                 map[string]any `http:"attributes,omitnil"`

	*TransactionOptions
	*ReadRetryOptions
}

type PingTxOptions struct {
	*TransactionOptions
}

type AbortTxOptions struct {
	Sticky bool `http:"sticky"`

	*TransactionOptions
	*MutatingOptions
	*PrerequisiteOptions
}

type CommitTxOptions struct {
	Sticky bool `http:"sticky"`

	*MutatingOptions
	*PrerequisiteOptions
	*TransactionOptions
}

// LowLevelTxClient provides stateless interface to YT transactions.
//
// Clients should rarely use it directly.
type LowLevelTxClient interface {
	// http:verb:"start_transaction"
	StartTx(
		ctx context.Context,
		options *StartTxOptions,
	) (id TxID, err error)

	// http:verb:"start_transaction"
	StartTabletTx(
		ctx context.Context,
		options *StartTabletTxOptions,
	) (id TxID, err error)

	// http:verb:"ping_transaction"
	// http:params:"transaction_id"
	PingTx(
		ctx context.Context,
		id TxID,
		options *PingTxOptions,
	) (err error)

	// http:verb:"abort_transaction"
	// http:params:"transaction_id"
	AbortTx(
		ctx context.Context,
		id TxID,
		options *AbortTxOptions,
	) (err error)

	// http:verb:"commit_transaction"
	// http:params:"transaction_id"
	CommitTx(
		ctx context.Context,
		id TxID,
		options *CommitTxOptions,
	) (err error)
}

type WriteFileOptions struct {
	ComputeMD5 bool `http:"compute_md5"`
	FileWriter any  `http:"file_writer"`

	*TransactionOptions
	*PrerequisiteOptions
}

type ReadFileOptions struct {
	Offset     *int64 `http:"offset,omitnil"`
	Length     *int64 `http:"length,omitnil"`
	FileReader any    `http:"file_reader"`

	*TransactionOptions
	*AccessTrackingOptions
}

type PutFileToCacheOptions struct {
	CachePath ypath.YPath `http:"cache_path"`

	*MasterReadOptions
	*MutatingOptions
	*PrerequisiteOptions
}

type GetFileFromCacheOptions struct {
	CachePath ypath.YPath `http:"cache_path"`

	*MasterReadOptions
	*ReadRetryOptions
}

type FileClient interface {
	// http:verb:"write_file"
	// http:params:"path"
	WriteFile(
		ctx context.Context,
		path ypath.YPath,
		options *WriteFileOptions,
	) (w io.WriteCloser, err error)

	// http:verb:"read_file"
	// http:params:"path"
	ReadFile(
		ctx context.Context,
		path ypath.YPath,
		options *ReadFileOptions,
	) (r io.ReadCloser, err error)

	// http:verb:"put_file_to_cache"
	// http:params:"path","md5"
	PutFileToCache(
		ctx context.Context,
		path ypath.YPath,
		md5 string,
		options *PutFileToCacheOptions,
	) (cachedPath ypath.YPath, err error)

	// http:verb:"get_file_from_cache"
	// http:params:"md5"
	GetFileFromCache(
		ctx context.Context,
		md5 string,
		options *GetFileFromCacheOptions,
	) (path ypath.YPath, err error)
}

type WriteTableOptions struct {
	TableWriter any `http:"table_writer"`

	*TransactionOptions
	*AccessTrackingOptions
}

type ReadTableOptions struct {
	Unordered   bool `http:"unordered"`
	TableReader any  `http:"table_reader"`

	ControlAttributes any   `http:"control_attributes,omitnil"`
	StartRowIndexOnly *bool `http:"start_row_index_only,omitnil"`

	// Smart flag enables client side retries.
	//
	// When used outside of transaction, ReadTable automatically creates new transaction and
	// acquires table snapshot lock.
	//
	// When used inside of transaction, ReadTable does not create any additional transactions.
	//
	// Internal retries continue indefinitely. User must set appropriate timeout on request context.
	//
	// This is experimental option, that is currently off by default.
	Smart *bool

	*TransactionOptions
	*AccessTrackingOptions
}

type TableClient interface {
	// WriteTable opens low-level table writer. Use yt.WriteTable() function instead of calling this method directly.
	//
	// http:verb:"write_table"
	// http:params:"path"
	WriteTable(
		ctx context.Context,
		path ypath.YPath,
		options *WriteTableOptions,
	) (w TableWriter, err error)

	// http:verb:"read_table"
	// http:params:"path"
	ReadTable(
		ctx context.Context,
		path ypath.YPath,
		options *ReadTableOptions,
	) (r TableReader, err error)
}

type StartOperationOptions struct {
	*TransactionOptions
	*MutatingOptions
}

type AbortOperationOptions struct {
	AbortMessage *string `http:"abort_message,omitnil"`
}

type SuspendOperationOptions struct {
	AbortRunningJobs bool `http:"abort_running_jobs"`
}

type ResumeOperationOptions struct {
}

type CompleteOperationOptions struct {
}

type UpdateOperationParametersOptions struct {
}

type TransferAccountResourcesOptions struct {
	*MutatingOptions
}

type TransferPoolResourcesOptions struct {
	*MutatingOptions
}

type ListOperationsOptions struct {
	*MasterReadOptions

	*ReadRetryOptions

	FromTime       *yson.Time      `http:"from_time,omitnil"`
	ToTime         *yson.Time      `http:"to_time,omitnil"`
	Cursor         *yson.Time      `http:"cursor_time,omitnil"`
	User           *string         `http:"user,omitnil"`
	State          *OperationState `http:"state,omitnil"`
	Type           *OperationType  `http:"type,omitnil"`
	Filter         *string         `http:"filter,omitnil"`
	Limit          *int            `http:"limit,omitnil"`
	Pool           *string         `http:"pool,omitnil"`
	PoolTree       *string         `http:"pool_tree,omitnil"`
	IncludeArchive *bool           `http:"include_archive,omitnil"`
}

type ListJobsOptions struct {
	JobType                  *JobType       `http:"job_type,omitnil"`
	JobState                 *JobState      `http:"job_state,omitnil"`
	Address                  *string        `http:"address,omitnil"`
	WithStderr               *bool          `http:"with_stderr,omitnil"`
	WithFailContext          *bool          `http:"with_fail_context,omitnil"`
	WithMonitoringDescriptor *bool          `http:"with_monitoring_descriptor,omitnil"`
	SortField                *JobSortField  `http:"sort_field,omitnil"`
	SortOrder                *JobSortOrder  `http:"sort_order,omitnil"`
	Limit                    *int           `http:"limit,omitnil"`
	Offset                   *int           `http:"offset,omitnil"`
	DataSource               *JobDataSource `http:"data_source,omitnil"`
}

type JobStatus struct {
	ID              JobID              `yson:"id"`
	Type            string             `yson:"type"`
	State           string             `yson:"state"`
	Address         string             `yson:"address"`
	StartTime       yson.Time          `yson:"start_time"`
	FinishTime      yson.Time          `yson:"finish_time,omitempty"`
	FailContextSize int                `yson:"fail_context_size,omitempty"`
	Error           yterrors.Error     `yson:"error,omitempty"`
	Progress        float64            `yson:"progress,omitempty"`
	ExecAttributes  *JobExecAttributes `yson:"exec_attributes,omitempty"`
}

type JobExecAttributes struct {
	MediumName  string   `yson:"medium_name"`
	IPAddresses []string `yson:"ip_addresses"`
	SandboxPath string   `yson:"sandbox_path"`
	SlotIndex   int      `yson:"slot_index"`
}

type ListOperationsResult struct {
	Operations      []OperationStatus `yson:"operations"`
	Incomplete      bool              `yson:"incomplete"`
	PoolCounts      map[string]int    `yson:"pool_counts"`
	UserCounts      map[string]int    `yson:"user_counts"`
	StateCounts     map[string]int    `yson:"state_counts"`
	TypeCounts      map[string]int    `yson:"type_counts"`
	FailedJobsCount int               `yson:"failed_jobs_count"`
}

type ListJobsResult struct {
	Jobs []JobStatus `yson:"jobs"`
}

type GetJobStderrOptions struct {
}

type GetOperationOptions struct {
	Attributes     []string `http:"attributes,omitnil"`
	IncludeRuntime *bool    `http:"include_runtime,omitnil"`

	*MasterReadOptions

	*ReadRetryOptions
}

type OperationResult struct {
	Error *yterrors.Error `yson:"error"`
}

type WhoAmIResult struct {
	Login     string `json:"login"`
	Realm     string `json:"realm"`
	CSRFToken string `json:"csrf_token"`
}

type OperationRuntimeParameters struct {
	ACL                          []ACE          `yson:"acl"`
	SchedulingOptionsPerPoolTree map[string]any `yson:"scheduling_options_per_pool_tree"`
	Annotations                  map[string]any `yson:"annotations"`
	ErasedTrees                  []string       `yson:"erased_trees"`
}

type OperationStatus struct {
	ID                OperationID                `yson:"id"`
	State             OperationState             `yson:"state"`
	Result            *OperationResult           `yson:"result"`
	Type              OperationType              `yson:"type"`
	BriefProgress     OperationBriefProgress     `yson:"brief_progress"`
	BriefSpec         map[string]any             `yson:"brief_spec"`
	FullSpec          yson.RawValue              `yson:"full_spec"`
	StartTime         yson.Time                  `yson:"start_time"`
	FinishTime        yson.Time                  `yson:"finish_time"`
	Suspended         bool                       `yson:"suspended"`
	AuthenticatedUser string                     `yson:"authenticated_user"`
	RuntimeParameters OperationRuntimeParameters `yson:"runtime_parameters"`
}

type OperationBriefProgress struct {
	TotalJobCounter *TotalJobCounter `yson:"total_job_counter"`
}

type TotalJobCounter struct {
	Total     int64 `yson:"total"`
	Completed int64 `yson:"completed"`
	Running   int64 `yson:"running"`
}

type OperationStartClient interface {
	// http:verb:"start_operation"
	// http:params:"operation_type","spec"
	StartOperation(
		ctx context.Context,
		opType OperationType,
		spec any,
		options *StartOperationOptions,
	) (opID OperationID, err error)
}

// LowLevelSchedulerClient is stateless interface to the YT scheduler.
//
// Clients should use package mapreduce instead.
type LowLevelSchedulerClient interface {
	OperationStartClient

	// http:verb:"abort_operation"
	// http:params:"operation_id"
	AbortOperation(
		ctx context.Context,
		opID OperationID,
		options *AbortOperationOptions,
	) (err error)

	// http:verb:"suspend_operation"
	// http:params:"operation_id"
	SuspendOperation(
		ctx context.Context,
		opID OperationID,
		options *SuspendOperationOptions,
	) (err error)

	// http:verb:"resume_operation"
	// http:params:"operation_id"
	ResumeOperation(
		ctx context.Context,
		opID OperationID,
		options *ResumeOperationOptions,
	) (err error)

	// http:verb:"complete_operation"
	// http:params:"operation_id"
	CompleteOperation(
		ctx context.Context,
		opID OperationID,
		options *CompleteOperationOptions,
	) (err error)

	// http:verb:"update_operation_parameters"
	// http:params:"operation_id","parameters"
	UpdateOperationParameters(
		ctx context.Context,
		opID OperationID,
		params any,
		options *UpdateOperationParametersOptions,
	) (err error)

	// http:verb:"get_operation"
	// http:params:"operation_id"
	GetOperation(
		ctx context.Context,
		opID OperationID,
		options *GetOperationOptions,
	) (status *OperationStatus, err error)

	// http:verb:"get_operation"
	// http:params:"operation_alias"
	GetOperationByAlias(
		ctx context.Context,
		alias string,
		options *GetOperationOptions,
	) (status *OperationStatus, err error)

	// http:verb:"list_operations"
	ListOperations(
		ctx context.Context,
		options *ListOperationsOptions,
	) (operations *ListOperationsResult, err error)

	// http:verb:"list_jobs"
	// http:params:"operation_id"
	ListJobs(
		ctx context.Context,
		opID OperationID,
		options *ListJobsOptions,
	) (r *ListJobsResult, err error)

	// http:verb:"get_job_stderr"
	// http:params:"operation_id","job_id"
	GetJobStderr(
		ctx context.Context,
		opID OperationID,
		jobID JobID,
		options *GetJobStderrOptions,
	) (r []byte, err error)
}

type AddMemberOptions struct {
	*MutatingOptions
	*PrerequisiteOptions
}

type BuildMasterSnapshotsOptions struct {
	SetReadOnly               *bool `http:"set_read_only,omitnil"`
	WaitForSnapshotCompletion *bool `http:"wait_for_snapshot_completion,omitnil"`
	Retry                     *bool `http:"retry,omitnil"`
}

type BuildSnapshotOptions struct {
	CellID                    *guid.GUID `http:"cell_id,omitnil"`
	SetReadOnly               *bool      `http:"set_read_only,omitnil"`
	WaitForSnapshotCompletion *bool      `http:"wait_for_snapshot_completion,omitnil"`
}

type RemoveMemberOptions struct {
	*MutatingOptions
	*PrerequisiteOptions
}

type SetUserPasswordOptions struct{}

type IssueTokenOptions struct{}

type RevokeTokenOptions struct{}

type ListUserTokensOptions struct{}

type WhoAmIOptions struct{}

type AddMaintenanceOptions struct {
}

type RemoveMaintenanceOptions struct {
	Mine *bool            `http:"mine,omitnil"`
	All  *bool            `http:"all,omitnil"`
	User *string          `http:"user,omitnil"`
	IDs  []MaintenanceID  `http:"ids,omitnil"`
	Type *MaintenanceType `http:"type,omitnil"`
}

func (opts *RemoveMaintenanceOptions) ValidateFields() error {
	if opts.IDs == nil && opts.Mine == nil && opts.User == nil && opts.All == nil && opts.Type == nil {
		return xerrors.New("one of the options must be specified")
	}
	if opts.IDs != nil && len(opts.IDs) == 0 {
		return xerrors.New("\"ids\" must not be empty if specified")
	}
	if opts.User != nil && opts.Mine != nil {
		return xerrors.New("cannot specify both \"user\" and \"mine\"")
	}
	if opts.All != nil && (opts.Mine != nil || opts.User != nil || opts.Type != nil || opts.IDs != nil) {
		return xerrors.New("\"all\" cannot be used with other options")
	}
	return nil
}

func (opts *RemoveMaintenanceOptions) Log() []log.Field {
	return []log.Field{
		log.Any("mine", opts.Mine),
		log.Any("all", opts.All),
		log.Any("user", opts.User),
		log.Any("ids", opts.IDs),
		log.Any("typ", opts.Type),
	}
}

type CheckPermissionOptions struct {
	*TransactionOptions
	*PrerequisiteOptions
	*MasterReadOptions

	Columns []string `http:"columns,omitnil"`
}

type CheckPermissionByACLOptions struct {
	*PrerequisiteOptions
	*MasterReadOptions

	IgnoreMissingSubjects bool `http:"ignore_missing_subjects,omitfalse"`
}

type DisableChunkLocationsOptions struct {
}

type DestroyChunkLocationsOptions struct {
}

type ResurrectChunkLocationsOptions struct {
}

type RequestRestartOptions struct {
}

type CheckPermissionResult struct {
	Action      SecurityAction `yson:"action"`
	ObjectID    NodeID         `yson:"object_id,omitempty"`
	ObjectName  *string        `yson:"object_name,omitempty"`
	SubjectID   NodeID         `yson:"subject_id,omitempty"`
	SubjectName *string        `yson:"subject_name,omitempty"`
}

type CheckPermissionResponse struct {
	CheckPermissionResult

	Columns []CheckPermissionResult `yson:"columns,omitempty"`
}

type BuildMasterSnapshot struct {
	CellID     guid.GUID `yson:"cell_id"`
	SnapshotID int       `yson:"snapshot_id"`
}

type BuildMasterSnapshotsResponse = []BuildMasterSnapshot

type BuildSnapshotResponse struct {
	SnapshotID int `yson:"snapshot_id"`
}

type AddMaintenanceResponse struct {
	ID MaintenanceID `yson:"id"`
}

type RemoveMaintenanceResponse struct {
	BanCounts                  int `yson:"ban"`
	DecommissionCounts         int `yson:"decommission"`
	DisableSchedulerJobsCounts int `yson:"disable_scheduler_jobs"`
	DisableWriteSessionsCounts int `yson:"disable_write_sessions"`
	DisableTabletCellsCounts   int `yson:"disable_tablet_cells"`
	PendingRestartCounts       int `yson:"pending_restart"`
}

type DisableChunkLocationsResponse struct {
	LocationUUIDs []guid.GUID
}

type DestroyChunkLocationsResponse struct {
	LocationUUIDs []guid.GUID
}

type ResurrectChunkLocationsResponse struct {
	LocationUUIDs []guid.GUID
}

type AdminClient interface {
	// http:verb:"add_member"
	// http:params:"group","member"
	AddMember(
		ctx context.Context,
		group string,
		member string,
		options *AddMemberOptions,
	) (err error)

	// http:verb:"build_master_snapshots"
	BuildMasterSnapshots(
		ctx context.Context,
		options *BuildMasterSnapshotsOptions,
	) (result *BuildMasterSnapshotsResponse, err error)

	// http:verb:"build_snapshot"
	BuildSnapshot(
		ctx context.Context,
		options *BuildSnapshotOptions,
	) (result *BuildSnapshotResponse, err error)

	// http:verb:"remove_member"
	// http:params:"group","member"
	RemoveMember(
		ctx context.Context,
		group string,
		member string,
		options *RemoveMemberOptions,
	) (err error)

	// http:verb:"add_maintenance"
	// http:params:"component","address","type","comment"
	AddMaintenance(
		ctx context.Context,
		component MaintenanceComponent,
		address string,
		maintenanceType MaintenanceType,
		comment string,
		options *AddMaintenanceOptions,
	) (result *AddMaintenanceResponse, err error)

	// http:verb:"remove_maintenance"
	// http:params:"component","address"
	RemoveMaintenance(
		ctx context.Context,
		component MaintenanceComponent,
		address string,
		options *RemoveMaintenanceOptions,
	) (result *RemoveMaintenanceResponse, err error)

	// http:verb:"transfer_account_resources"
	// http:params:"source_account","destination_account","resource_delta"
	TransferAccountResources(
		ctx context.Context,
		srcAccount string,
		dstAccount string,
		resourceDelta any,
		options *TransferAccountResourcesOptions,
	) (err error)

	// http:verb:"transfer_pool_resources"
	// http:params:"source_pool","destination_pool","pool_tree","resource_delta"
	TransferPoolResources(
		ctx context.Context,
		srcPool string,
		dstPool string,
		poolTree string,
		resourceDelta any,
		options *TransferPoolResourcesOptions,
	) (err error)

	// http:verb:"check_permission"
	// http:params:"user","permission","path"
	CheckPermission(
		ctx context.Context,
		user string,
		permission Permission,
		path ypath.YPath,
		options *CheckPermissionOptions,
	) (result *CheckPermissionResponse, err error)

	// http:verb:"check_permission_by_acl"
	// http:params:"user","permission","acl"
	CheckPermissionByACL(
		ctx context.Context,
		user string,
		permission Permission,
		ACL []ACE,
		options *CheckPermissionByACLOptions,
	) (result *CheckPermissionResponse, err error)

	// http:verb:"disable_chunk_locations"
	// http:params:"node_address","location_uuids"
	DisableChunkLocations(
		ctx context.Context,
		nodeAddress string,
		locationUUIDs []guid.GUID,
		options *DisableChunkLocationsOptions,
	) (result *DisableChunkLocationsResponse, err error)

	// http:verb:"destroy_chunk_locations"
	// http:params:"node_address","recover_unlinked_disks","location_uuids"
	DestroyChunkLocations(
		ctx context.Context,
		nodeAddress string,
		recoverUnlinkedDisks bool,
		locationUUIDs []guid.GUID,
		options *DestroyChunkLocationsOptions,
	) (result *DestroyChunkLocationsResponse, err error)

	// http:verb:"resurrect_chunk_locations"
	// http:params:"node_address","location_uuids"
	ResurrectChunkLocations(
		ctx context.Context,
		nodeAddress string,
		locationUUIDs []guid.GUID,
		options *ResurrectChunkLocationsOptions,
	) (result *ResurrectChunkLocationsResponse, err error)

	// http:verb:"request_restart"
	// http:params:"node_address"
	RequestRestart(
		ctx context.Context,
		nodeAddress string,
		options *RequestRestartOptions,
	) error
}

type LockNodeOptions struct {
	Waitable     bool    `http:"waitable"`
	ChildKey     *string `http:"child_key,omitnil"`
	AttributeKey *string `http:"attribute_key,omitnil"`

	*TransactionOptions
	*MutatingOptions
}

type UnlockNodeOptions struct {
	*TransactionOptions
	*MutatingOptions
}

type LockResult struct {
	NodeID NodeID    `yson:"node_id"`
	LockID guid.GUID `yson:"lock_id"`
}

type LockClient interface {
	// http:verb:"lock"
	// http:params:"path","mode"
	LockNode(
		ctx context.Context,
		path ypath.YPath,
		mode LockMode,
		options *LockNodeOptions,
	) (res LockResult, err error)

	// http:verb:"unlock"
	// http:params:"path"
	UnlockNode(
		ctx context.Context,
		path ypath.YPath,
		options *UnlockNodeOptions,
	) (err error)
}

type TabletRangeOptions struct {
	FirstTabletIndex int `http:"first_tablet_index"`
	LastTabletIndex  int `http:"last_tablet_index"`
}

type MountTableOptions struct {
	*TabletRangeOptions
	*MutatingOptions

	CellID        *guid.GUID  `http:"cell_id,omitnil"`
	TargetCellIDs []guid.GUID `http:"target_cell_ids,omitnil"`
	Freeze        bool        `http:"freeze"`
}

type UnmountTableOptions struct {
	*TabletRangeOptions
	*MutatingOptions

	Force bool `http:"force"`
}

type RemountTableOptions struct {
	*TabletRangeOptions
	*MutatingOptions
}

type FreezeTableOptions struct {
	*TabletRangeOptions
	*MutatingOptions
}

type UnfreezeTableOptions struct {
	*TabletRangeOptions
	*MutatingOptions
}

type ReshardTableOptions struct {
	*TabletRangeOptions
	*MutatingOptions

	PivotKeys   any  `http:"pivot_keys,omitnil"`
	TabletCount *int `http:"tablet_count,omitnil"`
}

type AlterTableOptions struct {
	*MutatingOptions

	Schema            *schema.Schema `http:"schema,omitnil"`
	Dynamic           *bool          `http:"dynamic,omitnil"`
	UpstreamReplicaID *guid.GUID     `http:"upstream_replica_id,omitnil"`
}

type AlterTableReplicaOptions struct {
	Enabled *bool             `http:"enabled,omitnil"`
	Mode    *TableReplicaMode `http:"mode,omitnil"`
}

// Tx is high level API for master transactions.
//
// Create new tx by calling BeginTx() method on Client or other Tx.
//
// Cleanup of started tx is responsibility of the user. Tx is terminated, either by calling Commit() or Abort(),
// or by canceling ctx passed to BeginTx().
//
// Unterminated tx will result in goroutine leak.
type Tx interface {
	CypressClient
	FileClient
	TableClient
	LockClient

	OperationStartClient

	ID() TxID
	Commit() error
	Abort() error

	// Finished returns a channel that is closed when transaction finishes, either because it was committed or aborted.
	Finished() <-chan struct{}

	// BeginTx creates nested transaction.
	BeginTx(ctx context.Context, options *StartTxOptions) (tx Tx, err error)
}

type AttachTxOptions struct {
	// AutoPingable determine whether the library should ping the transaction.
	//
	// When set to true library creates a goroutine that pings transaction.
	// When set to false library doesn't ping transaction, and it's user responsibility to ping it.
	AutoPingable bool
}

type LookupRowsOptions struct {
	// KeepMissingRows changes handling of missing rows.
	//
	// When this flag is not set, missing rows are skipped.
	// When flag is set, nil values are returned for missing rows.
	KeepMissingRows bool `http:"keep_missing_rows"`

	// Timestamp overrides timestamp for lookup.
	//
	// By default, lookup returns data from the point in time when
	// transaction was started.
	Timestamp *Timestamp `http:"timestamp,omitnil"`

	// Columns filters columns in lookup result.
	Columns []string `http:"column_names,omitnil"`

	*TransactionOptions
}

type InsertRowsOptions struct {
	Atomicity          *Atomicity `http:"atomicity,omitnil"`
	RequireSyncReplica *bool      `http:"require_sync_replica,omitnil"`
	Update             *bool      `http:"update,omitnil"`
	Aggregate          *bool      `http:"aggregate,omitnil"`

	*TransactionOptions
}

type PushQueueProducerOptions struct {
	UserMeta       any    `http:"user_meta,omitnil"`
	SequenceNumber *int64 `http:"sequence_number,omitnil"`

	*TransactionOptions
}

type LockRowsOptions struct {
	*TransactionOptions
}

type DeleteRowsOptions struct {
	RequireSyncReplica *bool `http:"require_sync_replica,omitnil"`

	*TransactionOptions
}

type SelectRowsOptions struct {
	FailOnIncompleteResult    *bool `http:"fail_on_incomplete_result,omitnil"`
	InputRowLimit             *int  `http:"input_row_limit,omitnil"`
	OutputRowLimit            *int  `http:"output_row_limit,omitnil"`
	UseCanonicalNullRelations *bool `http:"use_canonical_null_relations,omitnil"`

	Timestamp *Timestamp `http:"timestamp,omitnil"`

	PlaceholderValues any `http:"placeholder_values,omitnil"`

	*TransactionOptions
	*TimeoutOptions
}

type StartTabletTxOptions struct {
	Atomicity *Atomicity     `http:"atomicity,omitnil"`
	Timeout   *yson.Duration `http:"timeout,omitnil"`

	Type   TxType `http:"type"`
	Sticky bool   `http:"sticky"`
}

type PushQueueProducerResult struct {
	LastSequenceNumber int64 `yson:"last_sequence_number"`
	SkippedRowCount    int64 `yson:"skipped_row_count"`
}

type TabletClient interface {
	// SelectRows executes query.
	//
	// Use strconv.Quote or %q format to escape string literals inside query.
	//
	// http:verb:"select_rows"
	// http:params:"query"
	SelectRows(
		ctx context.Context,
		query string,
		options *SelectRowsOptions,
	) (r TableReader, err error)

	// LookupRows performs lookup by key.
	//
	// Rows are returned in the order of provided keys.
	//
	// By default, returns one row for each key that is present in the table.
	//
	// When KeepMissingRows option is set, returns exactly len(keys) number of rows. If key is missing
	// from the table, corresponding row will be nil.
	//
	// http:verb:"lookup_rows"
	// http:params:"path"
	// http:extra
	LookupRows(
		ctx context.Context,
		path ypath.Path,
		keys []any,
		options *LookupRowsOptions,
	) (r TableReader, err error)

	// LockRows acquires lock for given keys, without changing row values.
	//
	// http:verb:"lock_rows"
	// http:params:"path","locks","lock_type"
	// http:extra
	LockRows(
		ctx context.Context,
		path ypath.Path,
		locks []string,
		lockType LockType,
		keys []any,
		options *LockRowsOptions,
	) (err error)

	// http:verb:"insert_rows"
	// http:params:"path"
	// http:extra
	InsertRows(
		ctx context.Context,
		path ypath.Path,
		rows []any,
		options *InsertRowsOptions,
	) (err error)

	// InsertRowBatch is API optimized for performance.
	//
	// It works just like InsertRows, but allows serializing rows ahead of time.
	InsertRowBatch(
		ctx context.Context,
		path ypath.Path,
		rowBatch RowBatch,
		options *InsertRowsOptions,
	) (err error)

	// http:verb:"delete_rows"
	// http:params:"path"
	// http:extra
	DeleteRows(
		ctx context.Context,
		path ypath.Path,
		keys []any,
		options *DeleteRowsOptions,
	) (err error)

	// http:verb:"push_queue_producer"
	// http:params:"producer_path","queue_path","session_id","epoch"
	// http:extra
	PushQueueProducer(
		ctx context.Context,
		producerPath ypath.Path,
		queuePath ypath.Path,
		sessionID string,
		epoch int64,
		rows []any,
		options *PushQueueProducerOptions,
	) (result *PushQueueProducerResult, err error)

	// PushQueueProducerBatch is API optimized for performance.
	//
	// It works just like PushQueueProducer, but allows serializing rows ahead of time.
	PushQueueProducerBatch(
		ctx context.Context,
		producerPath ypath.Path,
		queuePath ypath.Path,
		sessionID string,
		epoch int64,
		rowBatch RowBatch,
		options *PushQueueProducerOptions,
	) (result *PushQueueProducerResult, err error)
}

type CreateQueueProducerSessionOptions struct {
	UserMeta any `http:"user_meta,omitnil"`

	*TimeoutOptions
}

type RemoveQueueProducerSessionOptions struct {
	*TimeoutOptions
}

type CreateQueueProducerSessionResult struct {
	SequenceNumber int64         `yson:"sequence_number"`
	Epoch          int64         `yson:"epoch"`
	UserMeta       yson.RawValue `yson:"user_meta,omitempty"`
}

type QueueClient interface {
	// CreateQueueProducerSession creates a session in producer table or increase epoch if session is already exists.
	//
	// Returns user meta saved for session and current epoch.
	//
	// http:verb:"create_queue_producer_session"
	// http:params:"producer_path","queue_path","session_id"
	CreateQueueProducerSession(
		ctx context.Context,
		producerPath ypath.Path,
		queuePath ypath.Path,
		sessionID string,
		options *CreateQueueProducerSessionOptions,
	) (result *CreateQueueProducerSessionResult, err error)

	// RemoveQueueProducerSession remove a session from producer table.
	//
	// http:verb:"remove_queue_producer_session"
	// http:params:"producer_path","queue_path","session_id"
	RemoveQueueProducerSession(
		ctx context.Context,
		producerPath ypath.Path,
		queuePath ypath.Path,
		sessionID string,
		options *RemoveQueueProducerSessionOptions,
	) error
}

type MountClient interface {
	// http:verb:"mount_table"
	// http:params:"path"
	MountTable(
		ctx context.Context,
		path ypath.Path,
		options *MountTableOptions,
	) (err error)

	// http:verb:"unmount_table"
	// http:params:"path"
	UnmountTable(
		ctx context.Context,
		path ypath.Path,
		options *UnmountTableOptions,
	) (err error)

	// http:verb:"remount_table"
	// http:params:"path"
	RemountTable(
		ctx context.Context,
		path ypath.Path,
		options *RemountTableOptions,
	) (err error)

	// http:verb:"reshard_table"
	// http:params:"path"
	ReshardTable(
		ctx context.Context,
		path ypath.Path,
		options *ReshardTableOptions,
	) (err error)

	// http:verb:"alter_table"
	// http:params:"path"
	AlterTable(
		ctx context.Context,
		path ypath.Path,
		options *AlterTableOptions,
	) (err error)

	// http:verb:"freeze_table"
	// http:params:"path"
	FreezeTable(
		ctx context.Context,
		path ypath.Path,
		options *FreezeTableOptions,
	) (err error)

	// http:verb:"unfreeze_table"
	// http:params:"path"
	UnfreezeTable(
		ctx context.Context,
		path ypath.Path,
		options *UnfreezeTableOptions,
	) (err error)

	// http:verb:"alter_table_replica"
	// http:params:"replica_id"
	AlterTableReplica(
		ctx context.Context,
		id NodeID,
		options *AlterTableReplicaOptions,
	) (err error)
}

type CreateTableBackupOptions struct {
	CheckpointTimestampDelay *yson.Duration `http:"checkpoint_timestamp_delay,omitnil"`
	CheckpointCheckPeriod    *yson.Duration `http:"checkpoint_check_period,omitnil"`
	CheckpointCheckTimeout   *yson.Duration `http:"checkpoint_check_timeout,omitnil"`

	Force bool `http:"force"`

	*TimeoutOptions
}

type RestoreTableBackupOptions struct {
	Force          bool `http:"force"`
	Mount          bool `http:"mount"`
	EnableReplicas bool `http:"enable_replicas"`

	*TimeoutOptions
}

type TableBackupClient interface {
	// http:verb:"create_table_backup"
	// http:params:"manifest"
	CreateTableBackup(
		ctx context.Context,
		manifest BackupManifest,
		options *CreateTableBackupOptions,
	) error

	// http:verb:"restore_table_backup"
	// http:params:"manifest"
	RestoreTableBackup(
		ctx context.Context,
		manifest BackupManifest,
		options *RestoreTableBackupOptions,
	) error
}

type QueryTrackerOptions struct {
	Stage *string `http:"stage,omitnil"`
}

type StartQueryOptions struct {
	Settings             any       `http:"settings,omitnil"`
	Draft                *bool     `http:"draft,omitnil"`
	Annotations          any       `http:"annotations,omitnil"`
	AccessControlObjects *[]string `http:"access_control_objects,omitnil"`

	// COMPAT(mpereskokova)
	AccessControlObject *string `http:"access_control_object,omitnil"`

	*QueryTrackerOptions
}

type AbortQueryOptions struct {
	AbortMessage *string `http:"abort_message,omitnil"`

	*QueryTrackerOptions
}

type GetQueryOptions struct {
	Attributes []string `http:"attributes,omitnil"`
	Timestamp  *uint64  `http:"timestamp,omitnil"`

	*QueryTrackerOptions
}

type ListQueriesOptions struct {
	FromTime        *yson.Time              `http:"from_time,omitnil"`
	ToTime          *yson.Time              `http:"to_time,omitnil"`
	CursorTime      *yson.Time              `http:"cursor_time,omitnil"`
	CursorDirection *OperationSortDirection `http:"cursor_direction,omitnil"`
	UserFilter      *string                 `http:"user_filter,omitnil"`

	StateFilter  *QueryState  `http:"state_filter,omitnil"`
	EngineFilter *QueryEngine `http:"engine_filter,omitnil"`
	SubstrFilter *string      `http:"substr_filter,omitnil"`
	Limit        *int64       `http:"limit,omitnil"`

	Attributes []string `http:"attributes,omitnil"`

	*QueryTrackerOptions
}

type GetQueryResultOptions struct {
	*QueryTrackerOptions
}

type ReadQueryResultOptions struct {
	Columns       []string `http:"columns,omitnil"`
	LowerRowIndex *int64   `http:"lower_row_index,omitnil"`
	UpperRowIndex *int64   `http:"upper_row_index,omitnil"`

	*QueryTrackerOptions
}

type AlterQueryOptions struct {
	Annotations          any       `http:"annotations,omitnil"`
	AccessControlObjects *[]string `http:"access_control_objects,omitnil"`

	// COMPAT(mpereskokova)
	AccessControlObject *string `http:"access_control_object,omitnil"`

	*QueryTrackerOptions
}

type QueryTrackerClient interface {
	// http:verb:"start_query"
	// http:params:"engine","query"
	StartQuery(
		ctx context.Context,
		engine QueryEngine,
		query string,
		options *StartQueryOptions,
	) (id QueryID, err error)

	// http:verb:"abort_query"
	// http:params:"query_id"
	AbortQuery(
		ctx context.Context,
		id QueryID,
		options *AbortQueryOptions,
	) (err error)

	// http:verb:"get_query"
	// http:params:"query_id"
	GetQuery(
		ctx context.Context,
		id QueryID,
		options *GetQueryOptions,
	) (query *Query, err error)

	// http:verb:"list_queries"
	ListQueries(
		ctx context.Context,
		options *ListQueriesOptions,
	) (result *ListQueriesResult, err error)

	// http:verb:"get_query_result"
	// http:params:"query_id","result_index"
	GetQueryResult(
		ctx context.Context,
		id QueryID,
		resultIndex int64,
		options *GetQueryResultOptions,
	) (result *QueryResult, err error)

	// http:verb:"read_query_result"
	// http:params:"query_id","result_index"
	ReadQueryResult(
		ctx context.Context,
		id QueryID,
		resultIndex int64,
		options *ReadQueryResultOptions,
	) (r TableReader, err error)

	// http:verb:"alter_query"
	// http:params:"query_id"
	AlterQuery(
		ctx context.Context,
		id QueryID,
		options *AlterQueryOptions,
	) (err error)
}

type TabletTx interface {
	TabletClient

	ID() TxID
	Commit() error
	Abort() error
}

type LocateSkynetShareOptions struct{}

type GenerateTimestampOptions struct{}

type GetInSyncReplicasOptions struct{}

type AuthClient interface {
	// http:verb:"set_user_password"
	// http:params:"user","new_password_sha256","current_password_sha256"
	SetUserPassword(
		ctx context.Context,
		user string,
		newPassword string,
		currentPassword string,
		options *SetUserPasswordOptions,
	) (err error)

	// http:verb:"issue_token"
	// http:params:"user","password_sha256"
	IssueToken(
		ctx context.Context,
		user string,
		password string,
		options *IssueTokenOptions,
	) (token string, err error)

	// http:verb:"revoke_token"
	// http:params:"user","password_sha256","token_sha256"
	RevokeToken(
		ctx context.Context,
		user string,
		password string,
		token string,
		options *RevokeTokenOptions,
	) error

	// http:verb:"list_user_tokens"
	// http:params:"user","password_sha256"
	ListUserTokens(
		ctx context.Context,
		user string,
		password string,
		options *ListUserTokensOptions,
	) (tokens []string, err error)

	// http:verb:"whoami"
	WhoAmI(
		ctx context.Context,
		options *WhoAmIOptions,
	) (r *WhoAmIResult, err error)
}

type Client interface {
	CypressClient
	FileClient
	TableClient

	// BeginTx creates new tx.
	//
	// Tx lifetime is bound to ctx. Tx is automatically aborted when ctx is canceled.
	//
	// Active transaction consumes resources, client must finish transaction by calling Commit(), Abort()
	// or canceling ctx passed to BeginTx.
	BeginTx(ctx context.Context, options *StartTxOptions) (tx Tx, err error)

	// BeginTabletTx creates new tablet transaction.
	//
	// Tx lifetime is bound to ctx. Tx is automatically aborted when ctx is canceled.
	//
	// Active transaction consumes resources, client must finish transaction by calling Commit(), Abort()
	// or canceling ctx passed to BeginTabletTx.
	BeginTabletTx(ctx context.Context, options *StartTabletTxOptions) (tx TabletTx, err error)

	// AttachTx attaches to an existing tx.
	//
	// If AttachTxOptions.AutoPingable set to true, Tx lifetime is bound to ctx.
	// In this case, Tx is automatically aborted when ctx is canceled.
	AttachTx(ctx context.Context, txID TxID, options *AttachTxOptions) (tx Tx, err error)

	TabletClient
	MountClient
	TableBackupClient

	QueueClient

	// http:verb:"generate_timestamp"
	GenerateTimestamp(ctx context.Context, options *GenerateTimestampOptions) (ts Timestamp, err error)

	LowLevelTxClient
	LowLevelSchedulerClient

	AdminClient
	AuthClient

	QueryTrackerClient

	// http:verb:"locate_skynet_share"
	// http:params:"path"
	LocateSkynetShare(
		ctx context.Context,
		path ypath.YPath,
		options *LocateSkynetShareOptions,
	) (l ShareLocation, err error)

	// http:verb:"get_in_sync_replicas"
	// http:params:"path","timestamp"
	// http:extra
	GetInSyncReplicas(
		ctx context.Context,
		path ypath.Path,
		ts Timestamp,
		keys []any,
		options *GetInSyncReplicasOptions,
	) (ids []NodeID, err error)

	NewRowBatchWriter() RowBatchWriter

	// Stop() cancels and waits for completion of all background activity associated with this client.
	//
	// All transactions tracked by this client are aborted.
	Stop()
}
