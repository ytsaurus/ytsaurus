name: Check PR
on:
  workflow_call:
    inputs:
      commit-sha:
        required: true
        type: string

    secrets:
      YA_YT_TOKEN:
        required: true
      YC_SA_JSON_CREDENTIALS:
        required: true
      GH_PERSONAL_ACCESS_TOKEN:
        required: true
      YC_VM_USERNAME:
        required: true
      YC_VM_SSH_PUBLIC_KEY:
        required: true
      S3_ACCESS_KEY:
        required: false
      S3_SECRET_KEY:
        required: false
      BUILD_CACHE_BAZEL_USERNAME:
        required: false
      BUILD_CACHE_BAZEL_PASSWORD:
        required: false

env:
  ACTIONS_ALLOW_USE_UNSECURE_NODE_VERSION: true

jobs:

  notify-start:
    name: Notify PR start
    runs-on: trampoline
    outputs:
      comment-id: ${{ steps.notify-pr.outputs.comment-id }}
    steps:
      - name: Notify PR
        id: notify-pr
        uses: actions/github-script@v7
        env:
          PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
        with:
          script: |
            const current_time = new Date().toLocaleString("ru-RU");
            const message = 'PR autocheck started. Watch workflow progress [here](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).';
            const { data: comment } = await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '`' + current_time + '`' + ' ' + message
            });
            core.setOutput('comment-id', comment.id);

  start-vm:
    name: Start VM
    runs-on: trampoline
    outputs:
      label: ${{ steps.start-yc-runner.outputs.label }}
      instance-id: ${{ steps.start-yc-runner.outputs.instance-id }}
    steps:
      - name: Start YC runner
        id: start-yc-runner
        uses: yc-actions/yc-github-runner@v1
        with:
          mode: start
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          folder-id: ${{ vars.YC_FOLDER_ID }}
          image-id: ${{ vars.YC_DEFAULT_IMAGE_ID }}
          zone-id: ${{ vars.YC_ZONE_ID }}
          subnet-id: ${{ vars.YC_SUBNET_ID }}
          cores: 16
          memory: 64GB
          core-fraction: 100
          disk-type: network-ssd-nonreplicated
          disk-size: 558GB
          user: ${{ secrets.YC_VM_USERNAME }}
          ssh-public-key: ${{ secrets.YC_VM_SSH_PUBLIC_KEY }}
          public-ip: false
          ttl: PT24H
          disable-update: true
          runner-home-dir: /actions-runner
  
  checkout:
    name: Checkout sources
    needs: 
      - start-vm
    runs-on: ${{ needs.start-vm.outputs.label }}
    steps:
      - name: Checkout ytsaurus
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.commit-sha }}
          fetch-depth: 2
          path: ytsaurus
      - name: Checkout ydb
        uses: actions/checkout@v3
        with:
          repository: ydb-platform/ydb
          ref: 74ff898ca96053489214acb09862da6bf0bfb428
          path: ydb

  patch-ya-conf:
    name: Patch ya conf
    needs:
      - start-vm
      - checkout
    runs-on: ${{ needs.start-vm.outputs.label }}
    steps:
      - name: Patch ya conf
        run: |
          cat ./ydb/build/internal/ya.conf | grep -v bazel | grep -v "dist_cache" > ./patched.ya.conf
          cp ./patched.ya.conf ./ydb/build/internal/ya.conf

  build-strawberry:
    name: Build Strawberry controller
    needs:
      - start-vm
      - checkout
    with:
      runs-on-value: ${{ needs.start-vm.outputs.label }}
      build-strawberry: true
    secrets:
      BUILD_CACHE_BAZEL_USERNAME: ${{ secrets.BUILD_CACHE_BAZEL_USERNAME }}
      BUILD_CACHE_BAZEL_PASSWORD: ${{ secrets.BUILD_CACHE_BAZEL_PASSWORD }}
    uses: ./.github/workflows/build-jobs.yaml

  build-cmake:
    name: Build with cmake
    needs:
      - start-vm
      - checkout
      - build-strawberry
    with:
      runs-on-value: ${{ needs.start-vm.outputs.label }}
      cpp-build-system: cmake
      build-ytsaurus: true
      build-chyt: ${{ github.ref_name == 'main' }}
      build-python: true
    secrets:
      BUILD_CACHE_BAZEL_USERNAME: ${{ secrets.BUILD_CACHE_BAZEL_USERNAME }}
      BUILD_CACHE_BAZEL_PASSWORD: ${{ secrets.BUILD_CACHE_BAZEL_PASSWORD }}
    uses: ./.github/workflows/build-jobs.yaml

  build-ya-make:
    name: Build with ya-make
    needs:
      - start-vm
      - checkout
      - patch-ya-conf
    with:
      runs-on-value: ${{ needs.start-vm.outputs.label }}
      cpp-build-system: ya-make
      build-ytsaurus: true
      build-ytsaurus-tests: true
      build-query-tracker: ${{ github.ref_name == 'main' }}
      build-python: true
    secrets:
      BUILD_CACHE_BAZEL_USERNAME: ${{ secrets.BUILD_CACHE_BAZEL_USERNAME }}
      BUILD_CACHE_BAZEL_PASSWORD: ${{ secrets.BUILD_CACHE_BAZEL_PASSWORD }}
    uses: ./.github/workflows/build-jobs.yaml

  run-tests:
    name: PR tests
    needs:
      - start-vm
      - build-strawberry
      - build-ya-make
      - notify-start
      - checkout
    if: ${{ needs.build-ya-make.result == 'success' }}
    uses: ./.github/workflows/pr-tests.yaml
    with:
      runs-on-value: ${{ needs.start-vm.outputs.label }}
      comment-id: ${{ needs.notify-start.outputs.comment-id }}
    secrets:
      YA_YT_TOKEN: ${{ secrets.YA_YT_TOKEN }}
      S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
      S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}

  notify-finish:
    name: Notify PR finish
    needs:
      - notify-start
      - run-tests
      - start-vm
      - build-ya-make
      - build-cmake
      - build-strawberry
    runs-on: trampoline
    if: ${{ always() }}
    steps:
      - name: Notify PR
        uses: actions/github-script@v7
        with:
          script: |
            const current_time = new Date().toLocaleString("ru-RU");
            const message = 'PR autocheck finished.\nStatuses:\n'
            const strawberry_status = 'Strawberry controller: ' + '${{ needs.build-strawberry.result }}' + '\n';
            const cmake_status = 'CMake build: ' + '${{ needs.build-cmake.result }}' + '\n';
            const ya_make_status = 'Ya-make build: ' + '${{ needs.build-ya-make.result }}' + '\n';
            const tests_status = 'Tests: ' + '${{ needs.run-tests.result }}' + '\n';
            const comment = await github.rest.issues.getComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ needs.notify-start.outputs.comment-id }}
            });
            const comment_body = comment.data.body;
            const new_comment_body = comment_body + '\n' + '`' + current_time + '`' + ' ' + message + strawberry_status + cmake_status + ya_make_status + tests_status;
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ needs.notify-start.outputs.comment-id }},
              body: new_comment_body
            });

  stop-vm:
    name: Stop VM
    needs:
      - start-vm
      - build-ya-make
      - build-cmake
      - run-tests
      - notify-finish
    runs-on: trampoline
    if: ${{ always() }}
    steps:
      - name: Stop YC runner
        uses: yc-actions/yc-github-runner@v1
        with:
          mode: stop
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-vm.outputs.label }}
          instance-id: ${{ needs.start-vm.outputs.instance-id }}
