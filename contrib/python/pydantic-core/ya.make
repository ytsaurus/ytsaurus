# Generated by devtools/yamaker (pypi).

PY3_LIBRARY()

VERSION(2.33.2)

LICENSE(MIT)

PEERDIR(
    contrib/python/typing-extensions
)

NO_LINT()

IF (OS_DARWIN AND ARCH_ARM64)
    COPY_FILE(a/aarch64-apple-darwin/release/lib_pydantic_core.a lib_pydantic_core.a)
ELSEIF (OS_DARWIN AND ARCH_X86_64)
    COPY_FILE(a/x86_64-apple-darwin/release/lib_pydantic_core.a lib_pydantic_core.a)
ELSEIF (OS_LINUX AND ARCH_AARCH64)
    COPY_FILE(a/aarch64-unknown-linux-gnu/release/lib_pydantic_core.a lib_pydantic_core.a)
ELSEIF (OS_LINUX AND ARCH_X86_64 AND MUSL)
    COPY_FILE(a/x86_64-unknown-linux-musl/release/lib_pydantic_core.a lib_pydantic_core.a)
ELSEIF (OS_LINUX AND ARCH_X86_64 AND NOT MUSL)
    COPY_FILE(a/x86_64-unknown-linux-gnu/release/lib_pydantic_core.a lib_pydantic_core.a)
ELSEIF (OS_WINDOWS AND ARCH_X86_64)
    COPY_FILE(a/x86_64-pc-windows-msvc/release/lib_pydantic_core.lib lib_pydantic_core.lib)
# ELSE()
#     MESSAGE(FATAL_ERROR "We don't have lib_pydantic_core for this platform")
ENDIF()

IF (OS_DARWIN)
    LDFLAGS(
        -framework CoreFoundation
        -framework Security
    )
ELSEIF (OS_WINDOWS)
    LDFLAGS(
        ntdll.lib
    )
ENDIF()

PY_REGISTER(
    pydantic_core._pydantic_core
)

PY_SRCS(
    TOP_LEVEL
    pydantic_core/__init__.py
    pydantic_core/_pydantic_core.pyi
    pydantic_core/core_schema.py
)

RESOURCE_FILES(
    PREFIX contrib/python/pydantic-core/
    .dist-info/METADATA
    pydantic_core/py.typed
)

END()

RECURSE_FOR_TESTS(
    tests
)
